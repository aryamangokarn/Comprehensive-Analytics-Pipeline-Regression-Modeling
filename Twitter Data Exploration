{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Question 9"
      ],
      "metadata": {
        "id": "0LjwpqC0zFjl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jBypxCUhUuuq",
        "outputId": "869eac61-fab3-40e1-8233-c517ec185001"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ibkh7WpnUy1z"
      },
      "outputs": [],
      "source": [
        "!cd '/content/drive/MyDrive/219_LSDM/Project4/'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tnfngn-VvnWm"
      },
      "source": [
        "### Popularity Prediction"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aG9J4W0uvnWm"
      },
      "source": [
        "Report the following statistics for each hashtag, i.e. each file:\n",
        "  - Average number of tweets per hour;\n",
        "  - Average number of followers of users posting the tweets per tweet (to make it simple, we average over the number of tweets; if a user posted twice, we count the user and the user’s followers twice as well);\n",
        "  - Average number of retweets per tweet.\n",
        "</font>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "import numpy as np\n",
        "\n",
        "def report_statistics(filename):\n",
        "    with open(filename, 'r') as file:\n",
        "        lines = file.readlines()\n",
        "        max_time = 0\n",
        "        min_time = np.inf\n",
        "        total_followers = 0\n",
        "        total_retweets = 0\n",
        "        total_tweets = len(lines)\n",
        "        for line in lines:\n",
        "            json_obj = json.loads(line)\n",
        "            if json_obj['citation_date'] > max_time:\n",
        "                max_time = json_obj['citation_date']\n",
        "            if json_obj['citation_date'] < min_time:\n",
        "                min_time = json_obj['citation_date']\n",
        "            total_followers += json_obj['author']['followers']\n",
        "            total_retweets += json_obj['metrics']['citations']['total']\n",
        "        avg_tweets_per_h = total_tweets * 3600 / (max_time - min_time)\n",
        "        avg_followers_per_tweet = total_followers / total_tweets\n",
        "        avg_retweets_per_tweet = total_retweets / total_tweets\n",
        "        print(filename)\n",
        "        print('Average number of tweets per hour: ', avg_tweets_per_h)\n",
        "        print('Average number of followers of users posting the tweets per tweet: ', avg_followers_per_tweet)\n",
        "        print('Average number of retweets per tweet: ', avg_retweets_per_tweet)\n",
        "        print('-' * 50)"
      ],
      "metadata": {
        "id": "BpiglV_Zgdt-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w4PVqYlKvnWn",
        "outputId": "ae662336-b227-4606-efd7-597486af976a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "ECE219_tweet_data/tweets_#gohawks.txt\n",
            "Average number of tweets per hour:  292.48785062173687\n",
            "Average number of followers of users posting the tweets per tweet:  2217.9237355281984\n",
            "Average number of retweets per tweet:  2.0132093991319877\n",
            "--------------------------------------------------\n",
            "ECE219_tweet_data/tweets_#gopatriots.txt\n",
            "Average number of tweets per hour:  40.954698006061946\n",
            "Average number of followers of users posting the tweets per tweet:  1427.2526051635405\n",
            "Average number of retweets per tweet:  1.4081919101697078\n",
            "--------------------------------------------------\n",
            "ECE219_tweet_data/tweets_#nfl.txt\n",
            "Average number of tweets per hour:  397.0213901819841\n",
            "Average number of followers of users posting the tweets per tweet:  4662.37544523693\n",
            "Average number of retweets per tweet:  1.5344602655543254\n",
            "--------------------------------------------------\n",
            "ECE219_tweet_data/tweets_#patriots.txt\n",
            "Average number of tweets per hour:  750.8942646068899\n",
            "Average number of followers of users posting the tweets per tweet:  3280.4635616550277\n",
            "Average number of retweets per tweet:  1.7852871288476946\n",
            "--------------------------------------------------\n",
            "ECE219_tweet_data/tweets_#sb49.txt\n",
            "Average number of tweets per hour:  1276.8570598680474\n",
            "Average number of followers of users posting the tweets per tweet:  10374.160292019487\n",
            "Average number of retweets per tweet:  2.52713444111402\n",
            "--------------------------------------------------\n",
            "ECE219_tweet_data/tweets_#superbowl.txt\n",
            "Average number of tweets per hour:  2072.11840170408\n",
            "Average number of followers of users posting the tweets per tweet:  8814.96799424623\n",
            "Average number of retweets per tweet:  2.3911895819207736\n",
            "--------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "files = ['ECE219_tweet_data/tweets_#gohawks.txt', 'ECE219_tweet_data/tweets_#gopatriots.txt',\n",
        "         'ECE219_tweet_data/tweets_#nfl.txt', 'ECE219_tweet_data/tweets_#patriots.txt',\n",
        "         'ECE219_tweet_data/tweets_#sb49.txt', 'ECE219_tweet_data/tweets_#superbowl.txt']\n",
        "\n",
        "for file in files:\n",
        "    report_statistics(file)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9LXbtjpivnWn"
      },
      "source": [
        "Plot “number of tweets in hour” over time for #SuperBowl and #NFL (a bar plot with 1-hour bins). The tweets are stored in separate files for different hashtags and files are named as tweet_[#hashtag].txt. </font>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K5AYRzrFvnWn"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "import datetime\n",
        "import pytz\n",
        "\n",
        "pst_tz = pytz.timezone('America/Los_Angeles')\n",
        "\n",
        "def report_tweets(filename):\n",
        "    with open(filename, 'r') as file:\n",
        "        lines = file.readlines()\n",
        "        max_time = 0\n",
        "        min_time = np.inf\n",
        "        total_tweets = len(lines)\n",
        "        for line in lines:\n",
        "            json_obj = json.loads(line)\n",
        "            if json_obj['citation_date'] > max_time:\n",
        "                max_time = json_obj['citation_date']\n",
        "            if json_obj['citation_date'] < min_time:\n",
        "                min_time = json_obj['citation_date']\n",
        "\n",
        "        total_hours = math.ceil((max_time - min_time) / 3600)\n",
        "        n_tweets = [0] * total_hours\n",
        "        for line in lines:\n",
        "            json_obj = json.loads(line)\n",
        "            index = math.floor((json_obj['citation_date'] - min_time) / 3600)\n",
        "            n_tweets[index] += 1\n",
        "        return n_tweets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dwBfF4dHvnWn",
        "outputId": "0575f701-68f6-41eb-fe4b-2e698d1c4f29"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "q2_files = ['ECE219_tweet_data/tweets_#nfl.txt','ECE219_tweet_data/tweets_#superbowl.txt']\n",
        "\n",
        "for file in q2_files:\n",
        "    n_tweets = report_tweets(file)\n",
        "    plt.figure(figsize=(10,6))\n",
        "    plt.bar(range(len(n_tweets)),n_tweets)\n",
        "    plt.xlabel('Hours over time')\n",
        "    plt.ylabel('Number of tweets')\n",
        "    plt.title('number of tweets in hours for '+file)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WTI79KlnvnWy"
      },
      "source": [
        "## Question 10"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Fan Base Prediction"
      ],
      "metadata": {
        "id": "Z-f7tsQP1VEF"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SkBtD5IrvnWy"
      },
      "source": [
        "<font size=4> **Question 10.1:** Explain the method you use to determine whether the location is in Washington, Massachusetts or neither. Only use the tweets whose authors belong to either Washington or Massachusetts for the next part."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "19YTCGr9vnWy"
      },
      "outputs": [],
      "source": [
        "import json\n",
        "\n",
        "# exclude any tweets whose author is not from Washington or Massachusetts\n",
        "WA_substrings = ['Washington', 'Seattle', 'WA']\n",
        "MA_substrings = ['Massachusetts', 'Boston', 'MA']\n",
        "\n",
        "superbowl_dataset_trimmed = []\n",
        "\n",
        "with open('ECE219_tweet_data/tweets_#superbowl.txt', 'r') as file:\n",
        "    lines = file.readlines()\n",
        "\n",
        "    for line in lines:\n",
        "        json_obj = json.loads(line)\n",
        "        location = json_obj['tweet']['user']['location']\n",
        "\n",
        "        for w in WA_substrings:\n",
        "            if w in location:\n",
        "                superbowl_dataset_trimmed.append((json_obj['tweet']['text'], 'Washington'))\n",
        "                break\n",
        "\n",
        "        for m in MA_substrings:\n",
        "            if m in location:\n",
        "                superbowl_dataset_trimmed.append((json_obj['tweet']['text'], 'Massachusetts'))\n",
        "                break"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g-B560gtvnWy"
      },
      "source": [
        "Training a binary classifier to predict the location of the author of a tweet (Washington or Massachusetts), given only the textual content of the tweet (using the techniques you learnt in project 1)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yb16aJJAvnWy"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "x_superbowl = np.array(superbowl_dataset_trimmed)[:, 0]\n",
        "y_superbowl = np.array(superbowl_dataset_trimmed)[:, 1]\n",
        "\n",
        "y_superbowl_binary = np.zeros(y_superbowl.shape)\n",
        "y_superbowl_binary[y_superbowl == 'Washington'] = 1\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x_superbowl, y_superbowl_binary, test_size=0.1, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qax947KlvnWy"
      },
      "outputs": [],
      "source": [
        "import nltk\n",
        "# nltk.download('wordnet')\n",
        "# nltk.download('punkt')\n",
        "# nltk.download('averaged_perceptron_tagger')\n",
        "\n",
        "from nltk import pos_tag\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem.wordnet import WordNetLemmatizer\n",
        "from nltk.corpus import wordnet as wn\n",
        "from collections import defaultdict\n",
        "\n",
        "# pos_tags: treebank to wordnet\n",
        "tag_map = defaultdict(lambda: wn.NOUN)\n",
        "tag_map['J'] = wn.ADJ\n",
        "tag_map['V'] = wn.VERB\n",
        "tag_map['R'] = wn.ADV\n",
        "\n",
        "wnl = WordNetLemmatizer()\n",
        "\n",
        "def lemmatize(data):\n",
        "    lemmatized = []\n",
        "    for doc in data:\n",
        "        tokens = word_tokenize(doc)\n",
        "        words = [wnl.lemmatize(word, tag_map[tag[0]]) for word,tag in pos_tag(tokens)\n",
        "                 if wnl.lemmatize(word, tag_map[tag[0]]).isalpha()]\n",
        "        sentence = ' '.join(words)\n",
        "        lemmatized.append(sentence)\n",
        "    return lemmatized"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2yzv97n3vnWy"
      },
      "outputs": [],
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.decomposition import TruncatedSVD\n",
        "\n",
        "x_train_lemmatized = lemmatize(x_train)\n",
        "x_test_lemmatized = lemmatize(x_test)\n",
        "\n",
        "tfidf_vectorizer = TfidfVectorizer(stop_words='english', min_df=3)\n",
        "x_train_tfidf = tfidf_vectorizer.fit_transform(x_train_lemmatized)\n",
        "x_test_tfidf = tfidf_vectorizer.transform(x_test_lemmatized)\n",
        "\n",
        "svd = TruncatedSVD(n_components=50, random_state=42)\n",
        "x_train_svd = svd.fit_transform(x_train_tfidf)\n",
        "x_test_svd = svd.transform(x_test_tfidf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bnIzQonqvnWy",
        "outputId": "19dc72ce-dae8-470b-adfa-88da52d9bd61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 21 candidates, totalling 105 fits\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   2 tasks      | elapsed:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done 105 out of 105 | elapsed:    2.1s finished\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>param_C</th>\n",
              "      <th>param_penalty</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.724697</td>\n",
              "      <td>100</td>\n",
              "      <td>l2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.724651</td>\n",
              "      <td>10</td>\n",
              "      <td>l2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.724651</td>\n",
              "      <td>1000</td>\n",
              "      <td>l2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.723890</td>\n",
              "      <td>1</td>\n",
              "      <td>l2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.719582</td>\n",
              "      <td>0.1</td>\n",
              "      <td>l2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   mean_test_score param_C param_penalty\n",
              "0         0.724697     100            l2\n",
              "1         0.724651      10            l2\n",
              "2         0.724651    1000            l2\n",
              "3         0.723890       1            l2\n",
              "4         0.719582     0.1            l2"
            ]
          },
          "execution_count": 39,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Logistic Regression: GridSearch\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "grid_logistic = GridSearchCV(estimator=LogisticRegression(random_state=42),\n",
        "                        param_grid={'C':[10**-3,10**-2,10**-1,10**0,10**1,10**2,10**3],\n",
        "                                   'penalty': ['l1', 'l2', 'elasticnet']},\n",
        "                        cv=5, n_jobs=-1, verbose=1).fit(x_train_svd, y_train)\n",
        "\n",
        "result_logistic = pd.DataFrame(grid_logistic.cv_results_)[['mean_test_score', 'param_C', 'param_penalty']]\n",
        "result_logistic = result_logistic.sort_values(by=['mean_test_score'], ascending=False).reset_index(drop=True)\n",
        "result_logistic.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bH5O7ISivnWy",
        "outputId": "81ba4f52-3bca-4184-cb57-58743e812083"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "LogisticRegression(C=100, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "logistic_optim = LogisticRegression(penalty=grid_logistic.best_params_['penalty'],\n",
        "                                    C=grid_logistic.best_params_['C'], random_state=42)\n",
        "\n",
        "logistic_optim.fit(x_train_svd, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jayIzV61vnWy",
        "outputId": "b9dda197-27d7-4881-fbc4-44c0f56e0fc4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Logistic Regression:\n",
            "confusion_matrix:\n",
            " [[1042 1117]\n",
            " [ 204 2460]]\n",
            "accuracy: 0.7261040845946506\n",
            "recall: 0.9234234234234234\n",
            "precision: 0.6877271456527817\n",
            "f1_score: 0.7883352026918764\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "y_pred_logistic = logistic_optim.predict(x_test_svd)\n",
        "y_pred_prob_logistic = logistic_optim.predict_proba(x_test_svd)[:,1]\n",
        "\n",
        "print('Logistic Regression:')\n",
        "print('confusion_matrix:\\n', confusion_matrix(y_test, y_pred_logistic))\n",
        "print('accuracy:', accuracy_score(y_test, y_pred_logistic))\n",
        "print('recall:', recall_score(y_test, y_pred_logistic))\n",
        "print('precision:', precision_score(y_test, y_pred_logistic))\n",
        "print('f1_score:', f1_score(y_test, y_pred_logistic))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M9C6IOGmvnWy",
        "outputId": "98a1aa22-76a9-4ca1-a290-c89b6c5d96a6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import plot_confusion_matrix\n",
        "\n",
        "class_names = ['MA', 'WA']\n",
        "\n",
        "plot_confusion_matrix(logistic_optim, x_test_svd, y_test, display_labels=class_names,\n",
        "                             values_format='d', cmap=plt.cm.Greys)\n",
        "plt.tight_layout()\n",
        "plt.title('Confusion Matrix for Logistic Regression', fontweight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ncMIAB-svnWy",
        "outputId": "5e7c66e0-3060-465b-ff30-9766be4d2bf7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 7 candidates, totalling 35 fits\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  24 out of  35 | elapsed:   38.6s remaining:   17.7s\n",
            "[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:  1.1min finished\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>param_model__max_depth</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.724766</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.722623</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.722623</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.722623</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.722623</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   mean_test_score param_model__max_depth\n",
              "0         0.724766                     30\n",
              "1         0.722623                     70\n",
              "2         0.722623                    100\n",
              "3         0.722623                    200\n",
              "4         0.722623                   None"
            ]
          },
          "execution_count": 43,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# RandomForest: GridSearch\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import KFold, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "pipe_rfc = Pipeline([\n",
        "    ('standardize', StandardScaler()),\n",
        "    ('model', RandomForestClassifier(random_state=42))\n",
        "])\n",
        "\n",
        "param_grid = {\n",
        "    'model__max_depth': [10, 30, 50, 70, 100, 200, None]\n",
        "}\n",
        "\n",
        "\n",
        "grid_rfc = GridSearchCV(pipe_rfc, param_grid=param_grid, cv=KFold(5, shuffle=True, random_state=42), n_jobs=-1, verbose=1)\n",
        "grid_rfc.fit(x_train_svd, y_train)\n",
        "\n",
        "result_rfc = pd.DataFrame(grid_rfc.cv_results_)[['mean_test_score', 'param_model__max_depth']]\n",
        "result_rfc = result_rfc.sort_values(by=['mean_test_score'], ascending=False).reset_index(drop=True)\n",
        "result_rfc.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TlNvs5TSvnWy",
        "outputId": "dcc284a7-5eb8-4da4-fee9-d91f830b98b4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pipeline(memory=None,\n",
              "         steps=[('standardize',\n",
              "                 StandardScaler(copy=True, with_mean=True, with_std=True)),\n",
              "                ('model',\n",
              "                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,\n",
              "                                        class_weight=None, criterion='gini',\n",
              "                                        max_depth=30, max_features='auto',\n",
              "                                        max_leaf_nodes=None, max_samples=None,\n",
              "                                        min_impurity_decrease=0.0,\n",
              "                                        min_impurity_split=None,\n",
              "                                        min_samples_leaf=1, min_samples_split=2,\n",
              "                                        min_weight_fraction_leaf=0.0,\n",
              "                                        n_estimators=100, n_jobs=None,\n",
              "                                        oob_score=False, random_state=42,\n",
              "                                        verbose=0, warm_start=False))],\n",
              "         verbose=False)"
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pipe_rfc_optim = Pipeline([\n",
        "        ('standardize', StandardScaler()),\n",
        "        ('model', RandomForestClassifier(max_depth=30, random_state=42))\n",
        "])\n",
        "\n",
        "pipe_rfc_optim.fit(x_train_svd, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ShDijtHqvnWy",
        "outputId": "95ce4e4e-63c5-4dea-aab8-1869a0f7d11f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Logistic Regression:\n",
            "confusion_matrix:\n",
            " [[1320  839]\n",
            " [ 474 2190]]\n",
            "accuracy: 0.7277628032345014\n",
            "recall: 0.8220720720720721\n",
            "precision: 0.7230108946847145\n",
            "f1_score: 0.7693658879325488\n"
          ]
        }
      ],
      "source": [
        "y_pred_rfc = pipe_rfc_optim.predict(x_test_svd)\n",
        "y_pred_prob_rfc = pipe_rfc_optim.predict_proba(x_test_svd)[:,1]\n",
        "\n",
        "print('Logistic Regression:')\n",
        "print('confusion_matrix:\\n', confusion_matrix(y_test, y_pred_rfc))\n",
        "print('accuracy:', accuracy_score(y_test, y_pred_rfc))\n",
        "print('recall:', recall_score(y_test, y_pred_rfc))\n",
        "print('precision:', precision_score(y_test, y_pred_rfc))\n",
        "print('f1_score:', f1_score(y_test, y_pred_rfc))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6aEkCTrwvnWy",
        "outputId": "693e3d86-9992-46ec-8ae4-b5bea27eaf46"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_confusion_matrix(pipe_rfc_optim, x_test_svd, y_test, display_labels=class_names,\n",
        "                             values_format='d', cmap=plt.cm.Greys)\n",
        "plt.tight_layout()\n",
        "plt.title('Confusion Matrix for Random Forest', fontweight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dc1OoJSpvnWy",
        "outputId": "c8617011-0deb-48cd-e2d1-811d6646cb11"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 7 candidates, totalling 35 fits\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 24 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  24 out of  35 | elapsed:  8.1min remaining:  3.7min\n",
            "[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed: 14.0min finished\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>param_model__max_depth</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.721978</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.698132</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.687141</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.686980</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.686980</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   mean_test_score param_model__max_depth\n",
              "0         0.721978                     10\n",
              "1         0.698132                     30\n",
              "2         0.687141                     70\n",
              "3         0.686980                    100\n",
              "4         0.686980                    200"
            ]
          },
          "execution_count": 47,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# GradientBoosting: GridSearch\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import KFold, GridSearchCV\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "pipe_gbc = Pipeline([\n",
        "    ('standardize', StandardScaler()),\n",
        "    ('model', GradientBoostingClassifier(random_state=42))\n",
        "])\n",
        "\n",
        "param_grid = {\n",
        "    'model__max_depth': [10, 30, 50, 70, 100, 200, None]\n",
        "}\n",
        "\n",
        "\n",
        "grid_gbc = GridSearchCV(pipe_gbc, param_grid=param_grid, cv=KFold(5, shuffle=True, random_state=42), n_jobs=-1, verbose=1)\n",
        "grid_gbc.fit(x_train_svd, y_train)\n",
        "\n",
        "result_gbc = pd.DataFrame(grid_gbc.cv_results_)[['mean_test_score', 'param_model__max_depth']]\n",
        "result_gbc = result_gbc.sort_values(by=['mean_test_score'], ascending=False).reset_index(drop=True)\n",
        "result_gbc.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pP5nf26FvnWy",
        "outputId": "5d1e5618-6a62-4ae2-8e74-994e14e20af2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pipeline(memory=None,\n",
              "         steps=[('standardize',\n",
              "                 StandardScaler(copy=True, with_mean=True, with_std=True)),\n",
              "                ('model',\n",
              "                 GradientBoostingClassifier(ccp_alpha=0.0,\n",
              "                                            criterion='friedman_mse', init=None,\n",
              "                                            learning_rate=0.1, loss='deviance',\n",
              "                                            max_depth=10, max_features=None,\n",
              "                                            max_leaf_nodes=None,\n",
              "                                            min_impurity_decrease=0.0,\n",
              "                                            min_impurity_split=None,\n",
              "                                            min_samples_leaf=1,\n",
              "                                            min_samples_split=2,\n",
              "                                            min_weight_fraction_leaf=0.0,\n",
              "                                            n_estimators=100,\n",
              "                                            n_iter_no_change=None,\n",
              "                                            presort='deprecated',\n",
              "                                            random_state=42, subsample=1.0,\n",
              "                                            tol=0.0001, validation_fraction=0.1,\n",
              "                                            verbose=0, warm_start=False))],\n",
              "         verbose=False)"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pipe_gbc_optim = Pipeline([\n",
        "        ('standardize', StandardScaler()),\n",
        "        ('model', GradientBoostingClassifier(max_depth=10, random_state=42))\n",
        "])\n",
        "\n",
        "pipe_gbc_optim.fit(x_train_svd, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2_fajaRTvnWy",
        "outputId": "0b8ae3b7-9ed2-4d10-ce83-b403e1acc39c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Logistic Regression:\n",
            "confusion_matrix:\n",
            " [[1341  818]\n",
            " [ 496 2168]]\n",
            "accuracy: 0.72755546340452\n",
            "recall: 0.8138138138138138\n",
            "precision: 0.7260549229738781\n",
            "f1_score: 0.767433628318584\n"
          ]
        }
      ],
      "source": [
        "y_pred_gbc = pipe_gbc_optim.predict(x_test_svd)\n",
        "y_pred_prob_gbc = pipe_gbc_optim.predict_proba(x_test_svd)[:,1]\n",
        "\n",
        "print('Logistic Regression:')\n",
        "print('confusion_matrix:\\n', confusion_matrix(y_test, y_pred_gbc))\n",
        "print('accuracy:', accuracy_score(y_test, y_pred_gbc))\n",
        "print('recall:', recall_score(y_test, y_pred_gbc))\n",
        "print('precision:', precision_score(y_test, y_pred_gbc))\n",
        "print('f1_score:', f1_score(y_test, y_pred_gbc))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XX4NMuJxvnWy",
        "outputId": "6050ed8f-4cec-495c-f17d-3190ae83cbb4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_confusion_matrix(pipe_gbc_optim, x_test_svd, y_test, display_labels=class_names,\n",
        "                             values_format='d', cmap=plt.cm.Greys)\n",
        "plt.tight_layout()\n",
        "plt.title('Confusion Matrix for Gradient Boosting', fontweight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5nzMpEv2vnWz",
        "outputId": "6d9c1c95-18d3-4874-ede3-3036a6c7702a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# aggregated ROC curves\n",
        "from sklearn.metrics import roc_curve\n",
        "\n",
        "fpr_logistic, tpr_logistic, _ = roc_curve(y_test, y_pred_prob_logistic)\n",
        "fpr_rfc, tpr_rfc, _ = roc_curve(y_test, y_pred_prob_rfc)\n",
        "fpr_gbc, tpr_gbc, _ = roc_curve(y_test, y_pred_prob_gbc)\n",
        "\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.plot(fpr_logistic, tpr_logistic, label = 'LogisticRegression', color='b', linewidth=1.5)\n",
        "plt.plot(fpr_rfc, tpr_rfc, label = 'RandomForest', color='r', linewidth=1.5)\n",
        "plt.plot(fpr_gbc, tpr_gbc, label = 'GradientBoosting', color='g', linewidth=1.5)\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.legend(loc='lower right')\n",
        "plt.title('ROC Curves for Comparing Three Different Algorithms', weight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "inLCz8eavnWz"
      },
      "source": [
        "### Sentiment Analysis (When Superbowl event is Active)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font size=4> **Question 10.2:**"
      ],
      "metadata": {
        "id": "vwiGDIF0lsmy"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fMaIaWTAvnWz"
      },
      "outputs": [],
      "source": [
        "import nltk\n",
        "# nltk.download('wordnet')\n",
        "# nltk.download('punkt')\n",
        "# nltk.download('averaged_perceptron_tagger')\n",
        "\n",
        "from nltk import pos_tag\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem.wordnet import WordNetLemmatizer\n",
        "from nltk.corpus import wordnet as wn\n",
        "from collections import defaultdict\n",
        "\n",
        "# pos_tags: treebank to wordnet\n",
        "tag_map = defaultdict(lambda: wn.NOUN)\n",
        "tag_map['J'] = wn.ADJ\n",
        "tag_map['V'] = wn.VERB\n",
        "tag_map['R'] = wn.ADV\n",
        "\n",
        "wnl = WordNetLemmatizer()\n",
        "\n",
        "def lemmatize_tweet(tweet):\n",
        "    tokens = word_tokenize(tweet)\n",
        "    words = [wnl.lemmatize(word, tag_map[tag[0]]) for word,tag in pos_tag(tokens)\n",
        "             if wnl.lemmatize(word, tag_map[tag[0]]).isalpha()]\n",
        "    sentence = ' '.join(words)\n",
        "    return sentence"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7JfdFx8qvnWz"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "import json\n",
        "import numpy as np\n",
        "from textblob import TextBlob\n",
        "\n",
        "def perform_sentiment_analysis(filename, min_time=pre_active_timestamp, max_time=post_active_timestamp):\n",
        "    with open(filename, 'r') as file:\n",
        "        lines = file.readlines()\n",
        "\n",
        "        num_time_window = math.ceil((max_time - min_time) / (3600))\n",
        "\n",
        "        # initialization\n",
        "        sentiment_summary = []\n",
        "        for _ in range(num_time_window):\n",
        "            sentiment_summary.append([])\n",
        "        positive_tweets, negative_tweets = np.zeros((num_time_window, 1)), np.zeros((num_time_window, 1))\n",
        "\n",
        "        for line in lines:\n",
        "            # retrieve index of one-hour time window\n",
        "            json_obj = json.loads(line)\n",
        "            date = json_obj['citation_date']\n",
        "            if min_time <= date <= max_time:\n",
        "                index = math.floor((date - min_time) / 3600)\n",
        "                # sentiment polarity\n",
        "                tweet = json_obj['tweet']['text']\n",
        "                polarity = TextBlob(lemmatize_tweet(tweet)).sentiment.polarity\n",
        "                if polarity > 0:\n",
        "                    positive_tweets[index, 0] += 1\n",
        "                elif polarity < 0:\n",
        "                    negative_tweets[index, 0] += 1\n",
        "\n",
        "                sentiment_summary[index].append(polarity)\n",
        "\n",
        "        sentiment_dist = []\n",
        "        for x in sentiment_summary:\n",
        "            if x:\n",
        "                sentiment_dist.append(np.mean(x))\n",
        "            else:\n",
        "                sentiment_dist.append(sentiment_dist[-1])\n",
        "        return sentiment_dist, positive_tweets, negative_tweets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hYVN0LnLvnWz"
      },
      "outputs": [],
      "source": [
        "seahawks_sentiment, seahawks_positive, seahawks_negative = perform_sentiment_analysis('ECE219_tweet_data/tweets_#gohawks.txt')\n",
        "patriots_sentiment, patriots_positive, patriots_negative = perform_sentiment_analysis('ECE219_tweet_data/tweets_#gopatriots.txt')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aFJOXbA6vnWz",
        "outputId": "d029a4fe-ab36-46b7-c05d-f2254c5b8166"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(np.arange(8, 20), seahawks_sentiment, label='Seahawks', color='b', linewidth=2)\n",
        "plt.plot(np.arange(8, 20), patriots_sentiment, label='Patriots', color='r', linewidth=2)\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Average Sentiment Polarity')\n",
        "plt.legend()\n",
        "plt.title('Average Sentiment Polarity Over Time', weight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fJ927OktvnWz",
        "outputId": "64cc38e7-3a6c-4767-834b-4dc230b6cc63"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(np.arange(8, 20), seahawks_positive, label='Positive', color='b', linewidth=2)\n",
        "plt.plot(np.arange(8, 20), seahawks_negative, label='Negative', color='r', linewidth=2)\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Number of Tweets')\n",
        "plt.legend()\n",
        "plt.title('#gohawks Positive and Negative Tweets Over Time', weight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A-CnwQJevnWz",
        "outputId": "cfe1dc74-b125-49cc-83bd-4d93d8d48a1f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.plot(np.arange(8, 20), patriots_positive, label='Positive', color='b', linewidth=2)\n",
        "plt.plot(np.arange(8, 20), patriots_negative, label='Negative', color='r', linewidth=2)\n",
        "plt.xlabel('Hour')\n",
        "plt.ylabel('Number of Tweets')\n",
        "plt.legend()\n",
        "plt.title('#gopatriots Positive and Negative Tweets Over Time', weight='bold')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RuqKQNqPvnWz"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.9"
    },
    "colab": {
      "provenance": [],
      "toc_visible": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}