{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Importing Libraries"
      ],
      "metadata": {
        "id": "1BBdTXvOUAVP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "TbZwUn5Oul0P"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Question 1"
      ],
      "metadata": {
        "id": "OOjHc6n_wzrn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 1.1"
      ],
      "metadata": {
        "id": "wfwbVdArw4CI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OGy0c2_TxTqm",
        "outputId": "f07e28f0-bc31-4e80-d38d-4b653fab5569"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the ratings data from the CSV file\n",
        "diamonds_url = '/content/drive/MyDrive/219_LSDM/Project4/diamonds_ece219.csv'\n",
        "diamonds = pd.read_csv(diamonds_url)"
      ],
      "metadata": {
        "id": "Hli9afEexVK6"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "diamonds.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "TLYoZZMzx6k6",
        "outputId": "d5e41e7f-a307-4128-9d9d-40cf73f18da8"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0 color clarity  carat        cut   symmetry     polish  \\\n",
              "0           0     E    VVS2   0.09  Excellent  Very Good  Very Good   \n",
              "1           1     E    VVS2   0.09  Very Good  Very Good  Very Good   \n",
              "2           2     E    VVS2   0.09  Excellent  Very Good  Very Good   \n",
              "3           3     E    VVS2   0.09  Excellent  Very Good  Very Good   \n",
              "4           4     E    VVS2   0.09  Very Good  Very Good  Excellent   \n",
              "\n",
              "   depth_percent  table_percent  length  width  depth girdle_min girdle_max  \\\n",
              "0           62.7           59.0    2.85   2.87   1.79          M          M   \n",
              "1           61.9           59.0    2.84   2.89   1.78        STK        STK   \n",
              "2           61.1           59.0    2.88   2.90   1.77         TN          M   \n",
              "3           62.0           59.0    2.86   2.88   1.78          M        STK   \n",
              "4           64.9           58.5    2.79   2.83   1.82        STK        STK   \n",
              "\n",
              "   price  \n",
              "0    200  \n",
              "1    200  \n",
              "2    200  \n",
              "3    200  \n",
              "4    200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ea551491-3619-455c-8877-06213d79617f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>color</th>\n",
              "      <th>clarity</th>\n",
              "      <th>carat</th>\n",
              "      <th>cut</th>\n",
              "      <th>symmetry</th>\n",
              "      <th>polish</th>\n",
              "      <th>depth_percent</th>\n",
              "      <th>table_percent</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>depth</th>\n",
              "      <th>girdle_min</th>\n",
              "      <th>girdle_max</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>62.7</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.85</td>\n",
              "      <td>2.87</td>\n",
              "      <td>1.79</td>\n",
              "      <td>M</td>\n",
              "      <td>M</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>61.9</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.84</td>\n",
              "      <td>2.89</td>\n",
              "      <td>1.78</td>\n",
              "      <td>STK</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>61.1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.88</td>\n",
              "      <td>2.90</td>\n",
              "      <td>1.77</td>\n",
              "      <td>TN</td>\n",
              "      <td>M</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>62.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.86</td>\n",
              "      <td>2.88</td>\n",
              "      <td>1.78</td>\n",
              "      <td>M</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>64.9</td>\n",
              "      <td>58.5</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2.83</td>\n",
              "      <td>1.82</td>\n",
              "      <td>STK</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea551491-3619-455c-8877-06213d79617f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea551491-3619-455c-8877-06213d79617f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea551491-3619-455c-8877-06213d79617f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-945be79c-0e11-4feb-9717-04104f79f1dc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-945be79c-0e11-4feb-9717-04104f79f1dc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-945be79c-0e11-4feb-9717-04104f79f1dc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "diamonds"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dropping the unnamed column\n",
        "diamonds = diamonds.drop(columns=['Unnamed: 0'])\n",
        "diamonds.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "45daESo7yipY",
        "outputId": "93f38551-9cbd-4a3e-9004-bc4d5a9e7f7d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  color clarity  carat        cut   symmetry     polish  depth_percent  \\\n",
              "0     E    VVS2   0.09  Excellent  Very Good  Very Good           62.7   \n",
              "1     E    VVS2   0.09  Very Good  Very Good  Very Good           61.9   \n",
              "2     E    VVS2   0.09  Excellent  Very Good  Very Good           61.1   \n",
              "3     E    VVS2   0.09  Excellent  Very Good  Very Good           62.0   \n",
              "4     E    VVS2   0.09  Very Good  Very Good  Excellent           64.9   \n",
              "\n",
              "   table_percent  length  width  depth girdle_min girdle_max  price  \n",
              "0           59.0    2.85   2.87   1.79          M          M    200  \n",
              "1           59.0    2.84   2.89   1.78        STK        STK    200  \n",
              "2           59.0    2.88   2.90   1.77         TN          M    200  \n",
              "3           59.0    2.86   2.88   1.78          M        STK    200  \n",
              "4           58.5    2.79   2.83   1.82        STK        STK    200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70c706b0-d6cc-437a-b8e9-ede0101a6597\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "      <th>clarity</th>\n",
              "      <th>carat</th>\n",
              "      <th>cut</th>\n",
              "      <th>symmetry</th>\n",
              "      <th>polish</th>\n",
              "      <th>depth_percent</th>\n",
              "      <th>table_percent</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>depth</th>\n",
              "      <th>girdle_min</th>\n",
              "      <th>girdle_max</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>62.7</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.85</td>\n",
              "      <td>2.87</td>\n",
              "      <td>1.79</td>\n",
              "      <td>M</td>\n",
              "      <td>M</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>61.9</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.84</td>\n",
              "      <td>2.89</td>\n",
              "      <td>1.78</td>\n",
              "      <td>STK</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>61.1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.88</td>\n",
              "      <td>2.90</td>\n",
              "      <td>1.77</td>\n",
              "      <td>TN</td>\n",
              "      <td>M</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>62.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.86</td>\n",
              "      <td>2.88</td>\n",
              "      <td>1.78</td>\n",
              "      <td>M</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>64.9</td>\n",
              "      <td>58.5</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2.83</td>\n",
              "      <td>1.82</td>\n",
              "      <td>STK</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70c706b0-d6cc-437a-b8e9-ede0101a6597')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70c706b0-d6cc-437a-b8e9-ede0101a6597 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70c706b0-d6cc-437a-b8e9-ede0101a6597');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-60c95eab-e778-49c3-9e60-360442657e33\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60c95eab-e778-49c3-9e60-360442657e33')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-60c95eab-e778-49c3-9e60-360442657e33 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "diamonds"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Performing EDA"
      ],
      "metadata": {
        "id": "DOwtXdc7968C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "diamonds.describe(include=object)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "SSt2e_5F19df",
        "outputId": "ebf8392a-3400-4701-9d42-9eb7cbb7f66a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         color clarity        cut   symmetry     polish girdle_min girdle_max\n",
              "count   149871  149871     149871     149871     149871     149871     149871\n",
              "unique      10      10          2          2          2         10         10\n",
              "top          E     VS2  Excellent  Excellent  Excellent          M        STK\n",
              "freq     23778   26056     118127     112883     129512      65040      64824"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b9830b4-fca1-4b02-a6c2-997c8f422591\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "      <th>clarity</th>\n",
              "      <th>cut</th>\n",
              "      <th>symmetry</th>\n",
              "      <th>polish</th>\n",
              "      <th>girdle_min</th>\n",
              "      <th>girdle_max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>149871</td>\n",
              "      <td>149871</td>\n",
              "      <td>149871</td>\n",
              "      <td>149871</td>\n",
              "      <td>149871</td>\n",
              "      <td>149871</td>\n",
              "      <td>149871</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>E</td>\n",
              "      <td>VS2</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>M</td>\n",
              "      <td>STK</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>23778</td>\n",
              "      <td>26056</td>\n",
              "      <td>118127</td>\n",
              "      <td>112883</td>\n",
              "      <td>129512</td>\n",
              "      <td>65040</td>\n",
              "      <td>64824</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b9830b4-fca1-4b02-a6c2-997c8f422591')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7b9830b4-fca1-4b02-a6c2-997c8f422591 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7b9830b4-fca1-4b02-a6c2-997c8f422591');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-79b8d75a-9924-47ce-b5b9-8d67ca169bca\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-79b8d75a-9924-47ce-b5b9-8d67ca169bca')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-79b8d75a-9924-47ce-b5b9-8d67ca169bca button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"diamonds\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"color\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          10,\n          \"23778\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clarity\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          10,\n          \"26056\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cut\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"118127\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"symmetry\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"112883\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"polish\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"129512\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"girdle_min\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          10,\n          \"65040\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"girdle_max\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          10,\n          \"64824\",\n          \"149871\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Creating a copy of the diamonds dataset\n",
        "diamondsCopy = diamonds.copy(deep=True)"
      ],
      "metadata": {
        "id": "wf0GNWGbS9hz"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique cut values\n",
        "cut_values = diamondsCopy['cut'].unique()\n",
        "print(cut_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lcR2LTinT6rm",
        "outputId": "f9f3f643-ada1-42a2-ea1b-a92131e91e3b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Excellent' 'Very Good']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique color values\n",
        "color_values = diamondsCopy['color'].unique()\n",
        "print(color_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bx1DoklIUkGZ",
        "outputId": "487c06c9-9c12-4e59-8c27-89417dddfafd"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['E' 'F' 'D' 'J' 'I' 'G' 'H' 'M' 'L' 'K']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique clarity values\n",
        "clarity_values = diamondsCopy['clarity'].unique()\n",
        "print(clarity_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E7jPr5oRUqNl",
        "outputId": "f2e960ef-428f-43ec-c588-1f4bed437e93"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['VVS2' 'VVS1' 'I1' 'VS1' 'VS2' 'IF' 'SI2' 'I2' 'SI1' 'I3']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique symmetry values\n",
        "symmetry_values = diamondsCopy['symmetry'].unique()\n",
        "print(symmetry_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KRXx1d7A-qOu",
        "outputId": "da2017e5-728e-46e5-f2b1-c707b3045ca2"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Very Good' 'Excellent']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique polish values\n",
        "polish_values = diamondsCopy['polish'].unique()\n",
        "print(polish_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dWqH1WHa-z1s",
        "outputId": "2db52437-c573-4390-9d2d-617bcf4c6b40"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Very Good' 'Excellent']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique girdle min values\n",
        "girdle_min_values = diamondsCopy['girdle_min'].unique()\n",
        "print(girdle_min_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ru1zQbKRA1HL",
        "outputId": "fd539d9c-50aa-4f55-ec7a-39820ca8d413"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['M' 'STK' 'TN' 'TK' 'unknown' 'VTN' 'XTN' 'VTK' 'STN' 'XTK']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the unique girdle min values\n",
        "girdle_max_values = diamondsCopy['girdle_max'].unique()\n",
        "print(girdle_max_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EGAbvQj8A8g6",
        "outputId": "33034d12-4259-4e93-d174-5b08e5bc9cd9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['M' 'STK' 'TK' 'unknown' 'TN' 'VTK' 'VTN' 'XTN' 'STN' 'XTK']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Plotting Heatmap"
      ],
      "metadata": {
        "id": "iXOj9BEB-A4X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot a heatmap of the Pearson correlation matrix\n",
        "correlation_matrix = diamonds.corr()\n",
        "plt.figure(figsize=(12, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.title(\"Pearson Correlation Matrix Heatmap\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 755
        },
        "id": "uUWuCadNx_eT",
        "outputId": "64e06776-a066-48cc-ccbf-20d0c6dafda5"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-5d56170440af>:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  correlation_matrix = diamonds.corr()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identify features with the highest absolute correlation with the target variable (price)\n",
        "target_correlation = correlation_matrix['price'].abs().sort_values(ascending=False)\n",
        "print(\"Features with the highest absolute correlation with the target variable:\")\n",
        "print(target_correlation[1:])  # Exclude the target variable itself"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9K_RXGvwyBPn",
        "outputId": "8415e695-f7d8-49e2-9f0a-8a7381f91da1"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features with the highest absolute correlation with the target variable:\n",
            "carat            0.913479\n",
            "length           0.869521\n",
            "width            0.841887\n",
            "depth            0.299696\n",
            "table_percent    0.042453\n",
            "depth_percent    0.025469\n",
            "Name: price, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Transforming Categorical Data"
      ],
      "metadata": {
        "id": "OpdkaZaJ9cTV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Encoding the columns\n",
        "cut_encoding = {'Very Good': 1,\n",
        "           'Excellent': 2}\n",
        "\n",
        "color_encoding = {'M' : 1,\n",
        "           'L' : 2,\n",
        "           'K': 3,\n",
        "           'J': 4,\n",
        "           'I': 5,\n",
        "           'H': 6,\n",
        "           'G': 7,\n",
        "           'F': 8,\n",
        "           'E': 9,\n",
        "           'D': 10 }\n",
        "\n",
        "\n",
        "clarity_encoding = {'I3' : 1,\n",
        "                'I2' : 2,\n",
        "                'I1' : 3,\n",
        "                'SI2' : 4,\n",
        "                'SI1': 5,\n",
        "                'VS2': 6,\n",
        "                'VS1': 7,\n",
        "                'VVS2': 8,\n",
        "                'VVS1': 9,\n",
        "                'IF': 10}\n",
        "\n",
        "symmetry_encoding = {'Very Good': 1,\n",
        "                     'Excellent': 2}\n",
        "\n",
        "polish_encoding = {'Very Good': 1,\n",
        "                   'Excellent': 2}\n",
        "\n",
        "girdle_encoding = {'unknown' : 0,\n",
        "                   'XTK' : 1,\n",
        "                   'XTN' : 2,\n",
        "                   'VTN' : 4,\n",
        "                   'VTK' : 5,\n",
        "                   'TN' : 6,\n",
        "                   'TK' : 7,\n",
        "                   'STN' : 8,\n",
        "                   'STK' : 9,\n",
        "                    'M' : 10}"
      ],
      "metadata": {
        "id": "ibt02OMhTyh7"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Creating columns for the encoded values\n",
        "diamondsCopy['cut_encoded'] = diamondsCopy.cut.map(cut_encoding)\n",
        "diamondsCopy['symmetry_encoded'] = diamondsCopy.symmetry.map(symmetry_encoding)\n",
        "diamondsCopy['polish_encoded'] = diamondsCopy.polish.map(polish_encoding)\n",
        "diamondsCopy['color_encoded'] = diamondsCopy.color.map(color_encoding)\n",
        "diamondsCopy['clarity_encoded'] = diamondsCopy.clarity.map(clarity_encoding)\n",
        "diamondsCopy['girdle_max_encoded'] = diamondsCopy.girdle_max.map(girdle_encoding)\n",
        "diamondsCopy['girdle_min_encoded'] = diamondsCopy.girdle_min.map(girdle_encoding)\n"
      ],
      "metadata": {
        "id": "HRlE9C0THhZC"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "diamondsCopy.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "6V1mLph6HjfD",
        "outputId": "ec3802de-8245-4b49-fe66-37efc739ab28"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  color clarity  carat        cut   symmetry     polish  depth_percent  \\\n",
              "0     E    VVS2   0.09  Excellent  Very Good  Very Good           62.7   \n",
              "1     E    VVS2   0.09  Very Good  Very Good  Very Good           61.9   \n",
              "2     E    VVS2   0.09  Excellent  Very Good  Very Good           61.1   \n",
              "3     E    VVS2   0.09  Excellent  Very Good  Very Good           62.0   \n",
              "4     E    VVS2   0.09  Very Good  Very Good  Excellent           64.9   \n",
              "\n",
              "   table_percent  length  width  ...  girdle_min girdle_max price  \\\n",
              "0           59.0    2.85   2.87  ...           M          M   200   \n",
              "1           59.0    2.84   2.89  ...         STK        STK   200   \n",
              "2           59.0    2.88   2.90  ...          TN          M   200   \n",
              "3           59.0    2.86   2.88  ...           M        STK   200   \n",
              "4           58.5    2.79   2.83  ...         STK        STK   200   \n",
              "\n",
              "   cut_encoded  symmetry_encoded  polish_encoded  color_encoded  \\\n",
              "0            2                 1               1              9   \n",
              "1            1                 1               1              9   \n",
              "2            2                 1               1              9   \n",
              "3            2                 1               1              9   \n",
              "4            1                 1               2              9   \n",
              "\n",
              "   clarity_encoded  girdle_max_encoded  girdle_min_encoded  \n",
              "0                8                  10                  10  \n",
              "1                8                   9                   9  \n",
              "2                8                  10                   6  \n",
              "3                8                   9                  10  \n",
              "4                8                   9                   9  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ca22958-3b76-48f3-b233-384c3d7fbbb2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>color</th>\n",
              "      <th>clarity</th>\n",
              "      <th>carat</th>\n",
              "      <th>cut</th>\n",
              "      <th>symmetry</th>\n",
              "      <th>polish</th>\n",
              "      <th>depth_percent</th>\n",
              "      <th>table_percent</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>...</th>\n",
              "      <th>girdle_min</th>\n",
              "      <th>girdle_max</th>\n",
              "      <th>price</th>\n",
              "      <th>cut_encoded</th>\n",
              "      <th>symmetry_encoded</th>\n",
              "      <th>polish_encoded</th>\n",
              "      <th>color_encoded</th>\n",
              "      <th>clarity_encoded</th>\n",
              "      <th>girdle_max_encoded</th>\n",
              "      <th>girdle_min_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>62.7</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.85</td>\n",
              "      <td>2.87</td>\n",
              "      <td>...</td>\n",
              "      <td>M</td>\n",
              "      <td>M</td>\n",
              "      <td>200</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>61.9</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.84</td>\n",
              "      <td>2.89</td>\n",
              "      <td>...</td>\n",
              "      <td>STK</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>61.1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.88</td>\n",
              "      <td>2.90</td>\n",
              "      <td>...</td>\n",
              "      <td>TN</td>\n",
              "      <td>M</td>\n",
              "      <td>200</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>62.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.86</td>\n",
              "      <td>2.88</td>\n",
              "      <td>...</td>\n",
              "      <td>M</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>E</td>\n",
              "      <td>VVS2</td>\n",
              "      <td>0.09</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Very Good</td>\n",
              "      <td>Excellent</td>\n",
              "      <td>64.9</td>\n",
              "      <td>58.5</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2.83</td>\n",
              "      <td>...</td>\n",
              "      <td>STK</td>\n",
              "      <td>STK</td>\n",
              "      <td>200</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ca22958-3b76-48f3-b233-384c3d7fbbb2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7ca22958-3b76-48f3-b233-384c3d7fbbb2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7ca22958-3b76-48f3-b233-384c3d7fbbb2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e94db12b-c9d8-43cf-8375-c593c88e61d7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e94db12b-c9d8-43cf-8375-c593c88e61d7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e94db12b-c9d8-43cf-8375-c593c88e61d7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "diamondsCopy"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dropping the original columns\n",
        "finalDiamonds = diamondsCopy.drop(columns=['cut','symmetry','polish','color','clarity','girdle_min','girdle_max'])\n",
        "finalDiamonds.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "8Hn-M6jnH5mH",
        "outputId": "59c220f3-9fba-4179-8bcf-aac1608f831e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   carat  depth_percent  table_percent  length  width  depth  price  \\\n",
              "0   0.09           62.7           59.0    2.85   2.87   1.79    200   \n",
              "1   0.09           61.9           59.0    2.84   2.89   1.78    200   \n",
              "2   0.09           61.1           59.0    2.88   2.90   1.77    200   \n",
              "3   0.09           62.0           59.0    2.86   2.88   1.78    200   \n",
              "4   0.09           64.9           58.5    2.79   2.83   1.82    200   \n",
              "\n",
              "   cut_encoded  symmetry_encoded  polish_encoded  color_encoded  \\\n",
              "0            2                 1               1              9   \n",
              "1            1                 1               1              9   \n",
              "2            2                 1               1              9   \n",
              "3            2                 1               1              9   \n",
              "4            1                 1               2              9   \n",
              "\n",
              "   clarity_encoded  girdle_max_encoded  girdle_min_encoded  \n",
              "0                8                  10                  10  \n",
              "1                8                   9                   9  \n",
              "2                8                  10                   6  \n",
              "3                8                   9                  10  \n",
              "4                8                   9                   9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-80cddd2a-255c-425c-9e16-570404e64395\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carat</th>\n",
              "      <th>depth_percent</th>\n",
              "      <th>table_percent</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>depth</th>\n",
              "      <th>price</th>\n",
              "      <th>cut_encoded</th>\n",
              "      <th>symmetry_encoded</th>\n",
              "      <th>polish_encoded</th>\n",
              "      <th>color_encoded</th>\n",
              "      <th>clarity_encoded</th>\n",
              "      <th>girdle_max_encoded</th>\n",
              "      <th>girdle_min_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.09</td>\n",
              "      <td>62.7</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.85</td>\n",
              "      <td>2.87</td>\n",
              "      <td>1.79</td>\n",
              "      <td>200</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.09</td>\n",
              "      <td>61.9</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.84</td>\n",
              "      <td>2.89</td>\n",
              "      <td>1.78</td>\n",
              "      <td>200</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.09</td>\n",
              "      <td>61.1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.88</td>\n",
              "      <td>2.90</td>\n",
              "      <td>1.77</td>\n",
              "      <td>200</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.09</td>\n",
              "      <td>62.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.86</td>\n",
              "      <td>2.88</td>\n",
              "      <td>1.78</td>\n",
              "      <td>200</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.09</td>\n",
              "      <td>64.9</td>\n",
              "      <td>58.5</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2.83</td>\n",
              "      <td>1.82</td>\n",
              "      <td>200</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80cddd2a-255c-425c-9e16-570404e64395')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-80cddd2a-255c-425c-9e16-570404e64395 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-80cddd2a-255c-425c-9e16-570404e64395');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f8be23a3-85e8-4bc6-89ff-99556d18c76e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f8be23a3-85e8-4bc6-89ff-99556d18c76e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f8be23a3-85e8-4bc6-89ff-99556d18c76e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "finalDiamonds"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot a heatmap of the Pearson correlation matrix\n",
        "correlation_matrix = finalDiamonds.corr()\n",
        "plt.figure(figsize=(18, 12))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n",
        "plt.title(\"Pearson Correlation Matrix Heatmap\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 825
        },
        "id": "bkjuzSmRKanZ",
        "outputId": "1fa41c0b-7d5a-4d56-f214-00ecec651a17"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x1200 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identify features with the highest absolute correlation with the target variable (price)\n",
        "target_correlation = correlation_matrix['price'].abs().sort_values(ascending=False)\n",
        "print(\"Features with the highest absolute correlation with the target variable:\")\n",
        "print(target_correlation[1:])  # Exclude the target variable itself"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gokNb93yM5qj",
        "outputId": "adab83e8-64e8-4bba-dbea-9b91feca4352"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features with the highest absolute correlation with the target variable:\n",
            "carat                 0.913479\n",
            "length                0.869521\n",
            "width                 0.841887\n",
            "depth                 0.299696\n",
            "polish_encoded        0.054928\n",
            "color_encoded         0.047189\n",
            "symmetry_encoded      0.047149\n",
            "table_percent         0.042453\n",
            "clarity_encoded       0.026788\n",
            "depth_percent         0.025469\n",
            "cut_encoded           0.024356\n",
            "girdle_max_encoded    0.013336\n",
            "girdle_min_encoded    0.000814\n",
            "Name: price, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Theory Question\n",
        "\n",
        "Plot a heatmap of the Pearson correlation matrix of the dataset columns. Report which features have the highest absolute correlation with the target variable. In the context of either dataset, describe what the correlation patterns suggest.\n",
        "\n",
        "> The highest correlation with the target variable, price, is observed in carat. Length and width also show significant correlations, emphasizing their importance in determining diamond price. This reinforces the understanding that carat, along with length and width, holds key information for evaluating diamond prices, consistent with market trends where size and carat weight play critical roles in pricing diamonds.\n"
      ],
      "metadata": {
        "id": "_gftUnlNsWsD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 1.2"
      ],
      "metadata": {
        "id": "IKrna5KQMxYw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot histograms of numerical features\n",
        "numerical_features = diamonds.select_dtypes(include=['float64', 'int64']).columns\n",
        "diamonds[numerical_features].hist(bins=20, figsize=(16, 12))\n",
        "plt.suptitle(\"Histograms of Numerical Features\", y=0.92)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 825
        },
        "id": "rw19pXRUMzew",
        "outputId": "32850075-8d40-4c9d-a74e-cbf66dc1ecc9"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x1200 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "GywZbcuLRKHc"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Identify features with high skewness\n",
        "skewness = finalDiamonds[numerical_features].skew()\n",
        "high_skew_features = skewness[abs(skewness) > 1.0].index\n",
        "print(\"Features with high skewness:\")\n",
        "print(high_skew_features)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GHv6h0mBS9NO",
        "outputId": "9340a49f-7ce5-4247-f52c-548cbec0d0ef"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features with high skewness:\n",
            "Index(['carat', 'depth_percent', 'table_percent', 'length', 'width', 'depth',\n",
            "       'price'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(skewness)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zNgPjzgpS9FH",
        "outputId": "ac69d02d-93a6-49a7-a321-4dc4f83e6e93"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "carat             2.331773\n",
            "depth_percent   -13.559608\n",
            "table_percent   -11.046563\n",
            "length            1.283604\n",
            "width             4.115348\n",
            "depth            27.493299\n",
            "price             3.071737\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import skew"
      ],
      "metadata": {
        "id": "_AR14gvbTV68"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check skewness of numerical features\n",
        "skewness = finalDiamonds.select_dtypes(include=['float64', 'int64']).apply(lambda x: skew(x.dropna()))\n",
        "\n",
        "highly_skewed_features = skewness[abs(skewness) > 1.0].index\n",
        "print(highly_skewed_features)\n",
        "print(skewness)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2YmKSd31SEl0",
        "outputId": "476afba1-67df-4472-a9de-b3217bd3f8ea"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['carat', 'depth_percent', 'table_percent', 'length', 'width', 'depth',\n",
            "       'price', 'cut_encoded', 'symmetry_encoded', 'polish_encoded'],\n",
            "      dtype='object')\n",
            "carat                  2.331750\n",
            "depth_percent        -13.559472\n",
            "table_percent        -11.046453\n",
            "length                 1.283591\n",
            "width                  4.115307\n",
            "depth                 27.493024\n",
            "price                  3.071707\n",
            "cut_encoded           -1.410662\n",
            "symmetry_encoded      -1.174542\n",
            "polish_encoded        -2.125702\n",
            "color_encoded         -0.466049\n",
            "clarity_encoded        0.053738\n",
            "girdle_max_encoded    -0.521589\n",
            "girdle_min_encoded    -0.455233\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the histogram of the \"price\" column\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.hist(diamonds['price'], bins=30, color='blue', alpha=0.7)\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of Diamond Prices')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Calculate skewness of the \"price\" column\n",
        "skewness = diamonds['price'].skew()\n",
        "print(\"Skewness of the 'price' column:\", skewness)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "Z8m4PpMFNHTc",
        "outputId": "107331ce-fee4-47d5-e6fc-dee51495c520"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Skewness of the 'price' column: 3.071737444546394\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* We can see the price distribution is right skewed.\n",
        "* Also there is a lot of high and medium prices which belongs to the rearest and nearly rear diamonds."
      ],
      "metadata": {
        "id": "bPjSsxLDNyKW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Applying logarithmic transformation on the skewed data\n",
        "DiamondsCopy = diamonds.copy(deep=True)\n",
        "# List of numerical columns to transform\n",
        "numerical_columns = DiamondsCopy.select_dtypes(include=[np.number]).columns\n",
        "\n",
        "# Apply logarithmic transformation to each numerical column\n",
        "for column in numerical_columns:\n",
        "    # Check if the column has negative or zero values\n",
        "    if (DiamondsCopy[column] <= 0).any():\n",
        "        # If the column contains non-positive values, add a small constant to make it positive\n",
        "        DiamondsCopy[column] = np.log1p(DiamondsCopy[column] + 1)  # Use np.log1p to handle zero values\n",
        "    else:\n",
        "        DiamondsCopy[column] = np.log(DiamondsCopy[column])\n",
        "\n",
        "# Visualize the transformed data\n",
        "print(DiamondsCopy.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uFe0i_IbdwV0",
        "outputId": "b9cb8c23-8853-4227-f0c1-9cb47d6cd7d7"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  color clarity     carat        cut   symmetry     polish  depth_percent  \\\n",
            "0     E    VVS2 -2.407946  Excellent  Very Good  Very Good       4.138361   \n",
            "1     E    VVS2 -2.407946  Very Good  Very Good  Very Good       4.125520   \n",
            "2     E    VVS2 -2.407946  Excellent  Very Good  Very Good       4.112512   \n",
            "3     E    VVS2 -2.407946  Excellent  Very Good  Very Good       4.127134   \n",
            "4     E    VVS2 -2.407946  Very Good  Very Good  Excellent       4.172848   \n",
            "\n",
            "   table_percent    length     width     depth girdle_min girdle_max     price  \n",
            "0       4.077537  1.047319  1.054312  0.582216          M          M  5.298317  \n",
            "1       4.077537  1.043804  1.061257  0.576613        STK        STK  5.298317  \n",
            "2       4.077537  1.057790  1.064711  0.570980         TN          M  5.298317  \n",
            "3       4.077537  1.050822  1.057790  0.576613          M        STK  5.298317  \n",
            "4       4.069027  1.026042  1.040277  0.598837        STK        STK  5.298317  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Applying logarithmic transformation on the skewed data\n",
        "DiamondsCopy = finalDiamonds.copy(deep=True)\n",
        "# List of numerical columns to transform\n",
        "numerical_columns = DiamondsCopy.select_dtypes(include=[np.number]).columns\n",
        "\n",
        "# Apply logarithmic transformation to each numerical column\n",
        "for column in numerical_columns:\n",
        "    # Check if the column has negative or zero values\n",
        "    if (DiamondsCopy[column] <= 0).any():\n",
        "        # If the column contains non-positive values, add a small constant to make it positive\n",
        "        DiamondsCopy[column] = np.log1p(finalDiamonds[column] + 1)  # Use np.log1p to handle zero values\n",
        "    else:\n",
        "        DiamondsCopy[column] = np.log(finalDiamonds[column])\n",
        "\n",
        "# Visualize the transformed data\n",
        "print(DiamondsCopy.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H1pZizKr26pt",
        "outputId": "19e502ee-023e-40dc-9dee-5e9b8eebafca"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      carat  depth_percent  table_percent    length     width     depth  \\\n",
            "0 -2.407946       4.138361       4.077537  1.047319  1.054312  0.582216   \n",
            "1 -2.407946       4.125520       4.077537  1.043804  1.061257  0.576613   \n",
            "2 -2.407946       4.112512       4.077537  1.057790  1.064711  0.570980   \n",
            "3 -2.407946       4.127134       4.077537  1.050822  1.057790  0.576613   \n",
            "4 -2.407946       4.172848       4.069027  1.026042  1.040277  0.598837   \n",
            "\n",
            "      price  cut_encoded  symmetry_encoded  polish_encoded  color_encoded  \\\n",
            "0  5.298317     0.693147               0.0        0.000000       2.197225   \n",
            "1  5.298317     0.000000               0.0        0.000000       2.197225   \n",
            "2  5.298317     0.693147               0.0        0.000000       2.197225   \n",
            "3  5.298317     0.693147               0.0        0.000000       2.197225   \n",
            "4  5.298317     0.000000               0.0        0.693147       2.197225   \n",
            "\n",
            "   clarity_encoded  girdle_max_encoded  girdle_min_encoded  \n",
            "0         2.079442            2.484907            2.484907  \n",
            "1         2.079442            2.397895            2.397895  \n",
            "2         2.079442            2.484907            2.079442  \n",
            "3         2.079442            2.397895            2.484907  \n",
            "4         2.079442            2.397895            2.397895  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking the skewness after the trasnformation\n",
        "skewness_after_log_trans = DiamondsCopy.select_dtypes(include=['float64', 'int64']).apply(lambda x: skew(x.dropna()))\n",
        "\n",
        "skewed_features_after_log_trans = skewness_after_log_trans[abs(skewness_after_log_trans) > 0.5].index\n",
        "print(skewed_features_after_log_trans)\n",
        "print(skewness_after_log_trans)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lwjcn74M3EmV",
        "outputId": "8c0694e1-ffba-4b7c-ba75-f01e6f74989e"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['carat', 'depth_percent', 'table_percent', 'length', 'width', 'depth',\n",
            "       'price', 'cut_encoded', 'symmetry_encoded', 'polish_encoded',\n",
            "       'color_encoded', 'clarity_encoded', 'girdle_max_encoded',\n",
            "       'girdle_min_encoded'],\n",
            "      dtype='object')\n",
            "carat                  0.844160\n",
            "depth_percent        -16.200465\n",
            "table_percent        -16.015117\n",
            "length                 0.734470\n",
            "width                  0.930143\n",
            "depth                  3.361822\n",
            "price                  0.897955\n",
            "cut_encoded           -1.410662\n",
            "symmetry_encoded      -1.174542\n",
            "polish_encoded        -2.125702\n",
            "color_encoded         -1.605959\n",
            "clarity_encoded       -0.577243\n",
            "girdle_max_encoded    -0.583845\n",
            "girdle_min_encoded    -0.563389\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Theory Question\n",
        "\n",
        "Plot the histogram of numerical features. What preprocessing can be done if the distribution of a feature has high skewness?\n",
        "\n",
        "> High skewness is observed in certain features, indicating the presence of costly outliers. When a feature's distribution is significantly skewed, meaning it lacks symmetry around the mean, several preprocessing techniques can be employed to address this issue. For instance, standardization can be implemented to mitigate the impact of extreme values on model robustness. Another common strategy involves logarithmic transformation, which helps reduce the magnitude of extreme values and brings the distribution closer to a normal shape. This transformation lessens the effect of heavily skewed values while preserving the relative differences among smaller values."
      ],
      "metadata": {
        "id": "pZCXz6irvihe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 1.3"
      ],
      "metadata": {
        "id": "LPZkLoQnTQjM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Construct and inspect box plots of categorical features vs. target variable\n",
        "categorical_features = diamonds.select_dtypes(include=['object'])\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "for feature in categorical_features:\n",
        "    sns.boxplot(x=feature, y='price', hue=feature, data=diamonds)\n",
        "    plt.title(f'Box Plot of {feature} vs. Price')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "5yVoR4J-wsKm",
        "outputId": "fe3e27bd-13dd-462c-cd4c-4a0fe72e9e47"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk0AAAHHCAYAAACiOWx7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABHhUlEQVR4nO3deXgUdbr28bsT0p0QSCKShQxhEZRFCIyAISIIgkRBj4z4CooSIMjBCSCgiIxMQFwYcQEUhEGPxJkjDvI64gFkicGACspmZBFwQwEhYTNpiJCE5Pf+4Um9tGwFNnSn8/1cV13QVU9XPdVJpe9UV/3iMMYYAQAA4JyCfN0AAABAZUBoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAANhAaAJwSf3www9yOBzKzMz0dSseli1bptatWys0NFQOh0MFBQW+bilg+OvXHPi9CE1AJZGZmSmHw+ExxcTEqEuXLlq6dOll7ycnJ8ejl5CQEF111VXq37+/vv/+e69sY82aNZo4caLXA83hw4d1zz33KCwsTDNnztQ///lPhYeHe3UbZ/Pqq6/6fZho0KDBad9nHTt21Hvvvefr1gCfqubrBgBcmEmTJqlhw4Yyxig/P1+ZmZnq0aOHFi1apNtvv/2y9zNixAi1a9dOpaWl2rRpk+bMmaMlS5Zoy5Ytio+P/13rXrNmjZ588kkNGDBAUVFR3mlY0vr163X06FE99dRT6tatm9fWa8err76q2rVra8CAAZd1uxeqdevWeuSRRyRJ+/bt09///nfdddddmjVrloYOHXrO59avX1/Hjx9XSEjI5WgVuGwITUAlc9ttt6lt27bW47S0NMXGxurtt9/2SWjq2LGj7r77bknSwIEDdc0112jEiBF68803NW7cuMvejx0HDhyQJK8GsUDzhz/8Qffff7/1uH///mrcuLGmTp161tB08uRJlZeXy+l0KjQ09HK1Clw2fDwHVHJRUVEKCwtTtWqevwMVFRXpkUceUUJCglwul5o0aaIXXnhBxhhJ0vHjx9W0aVM1bdpUx48ft5535MgR1alTRzfccIPKysouuJ+bb75ZkrRr165z1q1cuVIdO3ZUeHi4oqKidOedd2r79u3W8okTJ2rMmDGSpIYNG1ofFf3www/nXO+CBQvUpk0bhYWFqXbt2rr//vv1008/Wcs7d+6s1NRUSVK7du3kcDjOe9bnp59+UlpamuLj4+VyudSwYUM99NBDKikpsXp1OBynPa/iI9WKnhs0aKBt27Zp1apV1v507tz5jNssLS1VrVq1NHDgwNOWud1uhYaG6tFHH7XmvfLKK7r22mtVvXp1XXHFFWrbtq3mzZt3zv26EHFxcWrWrJn1da24bumFF17QtGnT1KhRI7lcLn311VdnvaZpx44duueeexQdHa2wsDA1adJETzzxhEfNTz/9pEGDBik2NlYul0vXXnut3njjDa/tB/B7cKYJqGQKCwt16NAhGWN04MABvfLKKzp27JjHWQFjjP7jP/5DH330kdLS0tS6dWstX75cY8aM0U8//aSpU6cqLCxMb775pjp06KAnnnhCL730kiQpPT1dhYWFyszMVHBw8AX3991330mSrrzyyrPWfPjhh7rtttt01VVXaeLEiTp+/LheeeUVdejQQZs2bVKDBg1011136euvv9bbb7+tqVOnqnbt2pKk6Ojos643MzNTAwcOVLt27TR58mTl5+dr+vTp+vTTT/XFF18oKipKTzzxhJo0aaI5c+ZYH3U2atTorOvct2+frr/+ehUUFGjIkCFq2rSpfvrpJ/3f//t/9csvv8jpdNp+baZNm6bhw4erRo0aVliIjY09Y21ISIj+9Kc/6d///rf+/ve/e2xn4cKFKi4uVt++fSVJr732mkaMGKG7775bDz/8sE6cOKHNmzfr888/13333We7v3MpLS3Vnj17Tvu6zp07VydOnNCQIUPkcrlUq1YtlZeXn/b8zZs3q2PHjgoJCdGQIUPUoEEDfffdd1q0aJGeeeYZSVJ+fr7at28vh8OhYcOGKTo6WkuXLlVaWprcbrdGjhzplX0BLpoBUCnMnTvXSDptcrlcJjMz06N24cKFRpJ5+umnPebffffdxuFwmG+//daaN27cOBMUFGRWr15tFixYYCSZadOmnbefjz76yEgyb7zxhjl48KDZt2+fWbJkiWnQoIFxOBxm/fr1xhhjdu3aZSSZuXPnWs9t3bq1iYmJMYcPH7bmffnllyYoKMj079/fmvf8888bSWbXrl3n7aekpMTExMSYFi1amOPHj1vzFy9ebCSZjIwMa17Fa1nR47n079/fBAUFnbG2vLzcGGPMhAkTzJl+nFZs59T+r732WnPTTTedd7vGGLN8+XIjySxatMhjfo8ePcxVV11lPb7zzjvNtddea2uddtSvX990797dHDx40Bw8eNB8+eWXpm/fvkaSGT58uDHm/39dIyIizIEDBzyef6aveadOnUzNmjXNjz/+6FFb8RoaY0xaWpqpU6eOOXTokEdN3759TWRkpPnll1+8to/AxeDjOaCSmTlzprKyspSVlaX//u//VpcuXTR48GD9+9//tmo++OADBQcHa8SIER7PfeSRR2SM8bjbbuLEibr22muVmpqqP//5z7rppptOe965DBo0SNHR0YqPj1fPnj1VVFSkN9980+O6q1Pt379fubm5GjBggGrVqmXNT0xM1C233KIPPvjA9rZPtWHDBh04cEB//vOfPa6n6dmzp5o2baolS5Zc8DrLy8u1cOFC3XHHHWfcnzN9JOdNN998s2rXrq358+db837++WdlZWWpT58+1ryoqCjt3btX69ev99q2V6xYoejoaEVHR6tVq1ZasGCBHnjgAT333HMedb179z7n2T9JOnjwoFavXq1BgwapXr16HssqXkNjjN59913dcccdMsbo0KFD1pSSkqLCwkJt2rTJa/sHXAw+ngMqmeuvv97jDfzee+/VH//4Rw0bNky33367nE6nfvzxR8XHx6tmzZoez23WrJkk6ccff7TmOZ1OvfHGG2rXrp1CQ0M1d+7cCwoDGRkZ6tixo4KDg1W7dm01a9bstOurTlWx7SZNmpy2rFmzZlq+fLmKiooueAiAc623adOm+uSTTy5ofdKvb/Zut1stWrS44Od6Q7Vq1dS7d2/NmzdPxcXFcrlc+ve//63S0lKP0DR27Fh9+OGHuv7669W4cWN1795d9913nzp06HDR205KStLTTz8th8Oh6tWrq1mzZme8cL5hw4bnXVfFEBTneh0PHjyogoICzZkzR3PmzDljTcUF/ICvEJqASi4oKEhdunTR9OnT9c033+jaa6+94HUsX75cknTixAl98803tt4IK7Rs2fKy37bvb84WMi/mQvrf6tu3r/7+979r6dKl6tWrl9555x01bdpUrVq1smqaNWumnTt3avHixVq2bJneffddvfrqq8rIyNCTTz55UdutXbu2ra9rWFjYRa3/tyqug7r//vutC/V/KzEx0SvbAi4WoQkIACdPnpQkHTt2TNKv4+R8+OGHOnr0qMfZph07dljLK2zevFmTJk3SwIEDlZubq8GDB2vLli2KjIy8JL1WbHvnzp2nLduxY4dq165tnWW6kDNep6634g6+Cjt37vTYZ7uio6MVERGhrVu3nrPuiiuukCQVFBR4nI059YxehQv9SK9Tp06qU6eO5s+frxtvvFErV6487Y4zSQoPD1efPn3Up08flZSU6K677tIzzzyjcePG+fz2/6uuukqSzvk6RkdHq2bNmiorK6vyIRz+i2uagEqutLRUK1askNPptD5+69Gjh8rKyjRjxgyP2qlTp8rhcOi2226znjtgwADFx8dr+vTpyszMVH5+vkaNGnXJ+q1Tp45at26tN99802Ok761bt2rFihXq0aOHNa8iPNkZEbxt27aKiYnR7NmzVVxcbM1funSptm/frp49e15wr0FBQerVq5cWLVqkDRs2nLbc/O/wDRV3361evdpaVnFt12+Fh4df0AjnQUFBuvvuu7Vo0SL985//1MmTJz0+mpN+HeH8VE6nU82bN5cxRqWlpZKkX375RTt27NChQ4dsb9tboqOj1alTJ73xxhvavXu3x7KK1zA4OFi9e/fWu+++e8ZwdfDgwcvSK3AunGkCKpmlS5daZ4wOHDigefPm6ZtvvtHjjz+uiIgISdIdd9yhLl266IknntAPP/ygVq1aacWKFXr//fc1cuRI603+6aefVm5urrKzs1WzZk0lJiYqIyND48eP19133+0RYLzp+eef12233abk5GSlpaVZQw5ERkZq4sSJVl2bNm0kSU888YT69u2rkJAQ3XHHHWe83ikkJETPPfecBg4cqJtuukn33nuvNeRAgwYNLjoIPvvss1qxYoVuuukmDRkyRM2aNdP+/fu1YMECffLJJ4qKilL37t1Vr149paWlacyYMQoODtYbb7yh6Ojo00JCmzZtNGvWLD399NNq3LixYmJiTjsz9lt9+vTRK6+8ogkTJqhly5ZWOK7QvXt3xcXFqUOHDoqNjdX27ds1Y8YM9ezZ0zrTuG7dOnXp0kUTJkzweI0vl5dfflk33nijrrvuOg0ZMkQNGzbUDz/8oCVLlig3N1eS9Le//U0fffSRkpKS9OCDD6p58+Y6cuSINm3apA8//FBHjhy57H0DHnx56x4A+8405EBoaKhp3bq1mTVrlset28YYc/ToUTNq1CgTHx9vQkJCzNVXX22ef/55q27jxo2mWrVq1i3kFU6ePGnatWtn4uPjzc8//3zWfiqGHFiwYME5+z7T7efGGPPhhx+aDh06mLCwMBMREWHuuOMO89VXX532/Keeesr84Q9/MEFBQbaGH5g/f7754x//aFwul6lVq5bp16+f2bt3r0fNhQw5YIwxP/74o+nfv7+Jjo42LpfLXHXVVSY9Pd0UFxdbNRs3bjRJSUnG6XSaevXqmZdeeumMQw7k5eWZnj17mpo1axpJtoYfKC8vNwkJCWccRsIYY/7+97+bTp06mSuvvNK4XC7TqFEjM2bMGFNYWGjVVHy9JkyYcN7t1a9f3/Ts2fOcNRVf1+eff/6sy377Nd+6dav505/+ZKKiokxoaKhp0qSJ+etf/+pRk5+fb9LT001CQoIJCQkxcXFxpmvXrmbOnDnn7Ru41BzG/O+5UQAAAJwV1zQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAGxjc0kvKy8u1b98+1axZ85L/5XMAAOAdxhgdPXpU8fHxCgo697kkQpOX7Nu3TwkJCb5uAwAAXIQ9e/aobt2656whNHlJxZ8q2LNnj/WnLAAAgH9zu91KSEjw+OPmZ0No8pKKj+QiIiIITQAAVDJ2Lq3hQnAAAAAbCE0AAAA2EJoAAABsIDQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAGxgRHLhA+/bt05AhQ3T8+HGFhYVpzpw5io+P93VbALygrKxMmzdv1pEjR1SrVi0lJiYqODjY123BTxCagAtwyy23qLS01Hp87Ngx3XfffQoJCVFWVpYPOwPwe61evVozZ85Ufn6+NS82Nlbp6enq1KmTDzuDv+DjOcCm3wamU5WWluqWW265zB0B8JbVq1crIyPDIzBJUn5+vjIyMrR69WofdQZ/QmgCbNi3b99ZA1OF0tJS7du37zJ1BMBbysrK9Mwzz0iSqlWrpq5duyo9PV1du3ZVtWq/fiDzzDPPqKyszJdtwg8QmgAbBg8e7NU6AP5jw4YNKi4uVlBQkKKiopSdna2ZM2cqOztbUVFRCgoKUnFxsTZs2ODrVuFjhCbAhl9++cWrdQD8x4IFCyRJ5eXlOnTokMeyQ4cOqby83KMOVRehCQBQpbndbq/WIXARmgAAVVqtWrW8WofARWgCAFRpFRd7e6sOgYvQBACo0nJzc71ah8BFaAIAVGknTpzwah0CF6EJAFClBQXZeyu0W4fAxXcAAKBKi46O9modAhehCQBQpRGaYBehCQBQpdWoUcOrdQhchCYAQJX25ZdferUOgYvQBACo0o4fP+7VOgQuQhMAoEoLDg72ah0CF6EJAFClOZ1Or9YhcBGaAABVWklJiVfrELgITQCAKo2P52AXoQkAUKU1btzYq3UIXD4NTbNmzVJiYqIiIiIUERGh5ORkLV261Fp+4sQJpaen68orr1SNGjXUu3dv5efne6xj9+7d6tmzp6pXr66YmBiNGTNGJ0+e9KjJycnRddddJ5fLpcaNGyszM/O0XmbOnKkGDRooNDRUSUlJWrdu3SXZZwCAf6lfv75X6xC4fBqa6tatq7/97W/auHGjNmzYoJtvvll33nmntm3bJkkaNWqUFi1apAULFmjVqlXat2+f7rrrLuv5ZWVl6tmzp0pKSrRmzRq9+eabyszMVEZGhlWza9cu9ezZU126dFFubq5GjhypwYMHa/ny5VbN/PnzNXr0aE2YMEGbNm1Sq1atlJKSogMHDly+FwMAAPg1hzHG+LqJU9WqVUvPP/+87r77bkVHR2vevHm6++67JUk7duxQs2bNtHbtWrVv315Lly7V7bffrn379ik2NlaSNHv2bI0dO1YHDx6U0+nU2LFjtWTJEm3dutXaRt++fVVQUKBly5ZJkpKSktSuXTvNmDFDklReXq6EhAQNHz5cjz/+uK2+3W63IiMjVVhYqIiICG++JPADnTt3tl2bk5NzyfoA4H1/+ctftGbNmvPW3XDDDXr22WcvQ0e4nC7k/dtvrmkqKyvTv/71LxUVFSk5OVkbN25UaWmpunXrZtU0bdpU9erV09q1ayVJa9euVcuWLa3AJEkpKSlyu93W2aq1a9d6rKOipmIdJSUl2rhxo0dNUFCQunXrZtWcSXFxsdxut8cEAKh8ysvLvVqHwOXz0LRlyxbVqFFDLpdLQ4cO1XvvvafmzZsrLy9PTqdTUVFRHvWxsbHKy8uTJOXl5XkEporlFcvOVeN2u3X8+HEdOnRIZWVlZ6ypWMeZTJ48WZGRkdaUkJBwUfsPAPCtw4cPe7UOgcvnoalJkybKzc3V559/roceekipqan66quvfN3WeY0bN06FhYXWtGfPHl+3BAC4CEFB9t4K7dYhcFXzdQNOp9O6jbNNmzZav369pk+frj59+qikpEQFBQUeZ5vy8/MVFxcnSYqLizvtLreKu+tOrfntHXf5+fmKiIhQWFiYgoODFRwcfMaainWcicvlksvluridBgD4jUOHDnm1DoHL72JzeXm5iouL1aZNG4WEhCg7O9tatnPnTu3evVvJycmSpOTkZG3ZssXjLresrCxFRESoefPmVs2p66ioqViH0+lUmzZtPGrKy8uVnZ1t1QAAAhd/sBd2+fRM07hx43TbbbepXr16Onr0qObNm6ecnBwtX75ckZGRSktL0+jRo1WrVi1FRERo+PDhSk5OVvv27SVJ3bt3V/PmzfXAAw9oypQpysvL0/jx45Wenm6dBRo6dKhmzJihxx57TIMGDdLKlSv1zjvvaMmSJVYfo0ePVmpqqtq2bavrr79e06ZNU1FRkQYOHOiT1wUAcPnwZ1Rgl09D04EDB9S/f3/t379fkZGRSkxM1PLly3XLLbdIkqZOnaqgoCD17t1bxcXFSklJ0auvvmo9Pzg4WIsXL9ZDDz2k5ORkhYeHKzU1VZMmTbJqGjZsqCVLlmjUqFGaPn266tatq9dff10pKSlWTZ8+fXTw4EFlZGQoLy9PrVu31rJly067OBwAEHh+OyDy761D4PK7cZoqK8ZpCmyM0wQELo7vqq1SjtMEAADgzwhNAAAANhCaAABVWrVq9i7vtVuHwEVoAgBUaaGhoV6tQ+AiNAEAqrQ//OEPXq1D4CI0AQCqNKfT6dU6BC5CEwCgSvvmm2+8WofARWgCAFRpJ06c8GodAhehCQAAwAZCEwCgSrvyyiu9WofARWgCAFRpQUH23grt1iFw8R0AAKjSDh065NU6BC5CEwCgSrP7d+v5+/YgNAEAqjSHw+HVOgQuQhMAoErjQnDYRWgCAFRpfDwHuwhNAIAqrby83Kt1CFyEJgBAlRYSEuLVOgQuQhMAoEqLjY31ah0CF6EJAFClMU4T7CI0AQCqNLfb7dU6BC5CEwCgSuPPqMAuvgMAAFUaF4LDLkITAKBKY5wm2EVoAgBUaWFhYV6tQ+AiNAEAqrTatWt7tQ6Bi9AEAKjSfv75Z6/WIXARmgAAVdr+/fu9WofARWgCAFRpJ0+e9GodAhehCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAqjT+9hzsIjQBAKq00NBQr9YhcBGaAABVGuM0wS5CEwCgSispKfFqHQIXoQkAUKWVlZV5tQ6Bi9AEAABgA6EJAADABkITAKBKCw4O9modApdPQ9PkyZPVrl071axZUzExMerVq5d27tzpUdO5c2c5HA6PaejQoR41u3fvVs+ePVW9enXFxMRozJgxp93lkJOTo+uuu04ul0uNGzdWZmbmaf3MnDlTDRo0UGhoqJKSkrRu3Tqv7zMAwL84HA6v1iFw+TQ0rVq1Sunp6frss8+UlZWl0tJSde/eXUVFRR51Dz74oPbv329NU6ZMsZaVlZWpZ8+eKikp0Zo1a/Tmm28qMzNTGRkZVs2uXbvUs2dPdenSRbm5uRo5cqQGDx6s5cuXWzXz58/X6NGjNWHCBG3atEmtWrVSSkqKDhw4cOlfCACAzzidTq/WIXA5jDHG101UOHjwoGJiYrRq1Sp16tRJ0q9nmlq3bq1p06ad8TlLly7V7bffrn379ik2NlaSNHv2bI0dO1YHDx6U0+nU2LFjtWTJEm3dutV6Xt++fVVQUKBly5ZJkpKSktSuXTvNmDFDklReXq6EhAQNHz5cjz/++Hl7d7vdioyMVGFhoSIiIn7PywA/1LlzZ9u1OTk5l6wPAN535513qrCw8Lx1kZGRev/99y9DR7icLuT926+uaar4pq1Vq5bH/Lfeeku1a9dWixYtNG7cOP3yyy/WsrVr16ply5ZWYJKklJQUud1ubdu2zarp1q2bxzpTUlK0du1aSb+OvbFx40aPmqCgIHXr1s2q+a3i4mK53W6PCQBQ+Rw9etSrdQhc1XzdQIXy8nKNHDlSHTp0UIsWLaz59913n+rXr6/4+Hht3rxZY8eO1c6dO/Xvf/9bkpSXl+cRmCRZj/Py8s5Z43a7dfz4cf38888qKys7Y82OHTvO2O/kyZP15JNP/r6dBgD4nN0PXPzogxn4iN+EpvT0dG3dulWffPKJx/whQ4ZY/2/ZsqXq1Kmjrl276rvvvlOjRo0ud5uWcePGafTo0dZjt9uthIQEn/UDALg4hCbY5RehadiwYVq8eLFWr16tunXrnrM2KSlJkvTtt9+qUaNGiouLO+0ut/z8fElSXFyc9W/FvFNrIiIiFBYWpuDgYAUHB5+xpmIdv+VyueRyuezvJAAAqNR8ek2TMUbDhg3Te++9p5UrV6phw4bnfU5ubq4kqU6dOpKk5ORkbdmyxeMut6ysLEVERKh58+ZWTXZ2tsd6srKylJycLOnXOyLatGnjUVNeXq7s7GyrBgAAVG0+PdOUnp6uefPm6f3331fNmjWta5AiIyMVFham7777TvPmzVOPHj105ZVXavPmzRo1apQ6deqkxMRESVL37t3VvHlzPfDAA5oyZYry8vI0fvx4paenW2eChg4dqhkzZuixxx7ToEGDtHLlSr3zzjtasmSJ1cvo0aOVmpqqtm3b6vrrr9e0adNUVFSkgQMHXv4XBgAA+B2fhqZZs2ZJOv127rlz52rAgAFyOp368MMPrQCTkJCg3r17a/z48VZtcHCwFi9erIceekjJyckKDw9XamqqJk2aZNU0bNhQS5Ys0ahRozR9+nTVrVtXr7/+ulJSUqyaPn366ODBg8rIyFBeXp5at26tZcuWnXZxOAAAqJr8apymyoxxmgIb4zQBgYvju2qrtOM0AQAA+CtCEwAAgA2EJgAAABsITQAAADYQmgAAVVpwcLBX6xC4CE0AgCotKMjeW6HdOgQuvgMAAFVaaWmpV+sQuAhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwCgSmOcJtjFdwAAoEoLDw/3ah0CF6EJAFClFRUVebUOgYvQBACo0srLy71ah8BFaAIAALCB0AQAAGADoQkAUKVFR0d7tQ6Bi9AEAKjSatSo4dU6BC5CEwCgSjt06JBX6xC4CE0AgCrt6NGjXq1D4CI0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwCgSnO5XF6tQ+AiNAEAqjT+9hzsIjQBAKq00tJSr9YhcBGaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwCgSnM4HF6tQ+AiNAEAqjRjjFfrELgITQAAADYQmgAAAGwgNAEAANhAaAIAALDBp6Fp8uTJateunWrWrKmYmBj16tVLO3fu9Kg5ceKE0tPTdeWVV6pGjRrq3bu38vPzPWp2796tnj17qnr16oqJidGYMWN08uRJj5qcnBxdd911crlcaty4sTIzM0/rZ+bMmWrQoIFCQ0OVlJSkdevWeX2fAQBA5eTT0LRq1Sqlp6frs88+U1ZWlkpLS9W9e3cVFRVZNaNGjdKiRYu0YMECrVq1Svv27dNdd91lLS8rK1PPnj1VUlKiNWvW6M0331RmZqYyMjKsml27dqlnz57q0qWLcnNzNXLkSA0ePFjLly+3aubPn6/Ro0drwoQJ2rRpk1q1aqWUlBQdOHDg8rwYAADArzmMH91DefDgQcXExGjVqlXq1KmTCgsLFR0drXnz5unuu++WJO3YsUPNmjXT2rVr1b59ey1dulS333679u3bp9jYWEnS7NmzNXbsWB08eFBOp1Njx47VkiVLtHXrVmtbffv2VUFBgZYtWyZJSkpKUrt27TRjxgxJUnl5uRISEjR8+HA9/vjj5+3d7XYrMjJShYWFioiI8PZLAx/r3Lmz7dqcnJxL1gcA7+P4rtou5P3br65pKiwslCTVqlVLkrRx40aVlpaqW7duVk3Tpk1Vr149rV27VpK0du1atWzZ0gpMkpSSkiK3261t27ZZNaeuo6KmYh0lJSXauHGjR01QUJC6detm1QAAgKqtmq8bqFBeXq6RI0eqQ4cOatGihSQpLy9PTqdTUVFRHrWxsbHKy8uzak4NTBXLK5adq8btduv48eP6+eefVVZWdsaaHTt2nLHf4uJiFRcXW4/dbvcF7jEAAKhM/OZMU3p6urZu3ap//etfvm7FlsmTJysyMtKaEhISfN0SAAC4hPwiNA0bNkyLFy/WRx99pLp161rz4+LiVFJSooKCAo/6/Px8xcXFWTW/vZuu4vH5aiIiIhQWFqbatWsrODj4jDUV6/itcePGqbCw0Jr27Nlz4TsOAAAqDZ+GJmOMhg0bpvfee08rV65Uw4YNPZa3adNGISEhys7Otubt3LlTu3fvVnJysiQpOTlZW7Zs8bjLLSsrSxEREWrevLlVc+o6Kmoq1uF0OtWmTRuPmvLycmVnZ1s1v+VyuRQREeExAQCAwOXTa5rS09M1b948vf/++6pZs6Z1DVJkZKTCwsIUGRmptLQ0jR49WrVq1VJERISGDx+u5ORktW/fXpLUvXt3NW/eXA888ICmTJmivLw8jR8/Xunp6XK5XJKkoUOHasaMGXrsscc0aNAgrVy5Uu+8846WLFli9TJ69Gilpqaqbdu2uv766zVt2jQVFRVp4MCBl/+FAQBcNkFBQSovL7dVh6rNp6Fp1qxZkk6/3XPu3LkaMGCAJGnq1KkKCgpS7969VVxcrJSUFL366qtWbXBwsBYvXqyHHnpIycnJCg8PV2pqqiZNmmTVNGzYUEuWLNGoUaM0ffp01a1bV6+//rpSUlKsmj59+ujgwYPKyMhQXl6eWrdurWXLlp12cTgAILDUqlVLhw4dslWHqs2vxmmqzBinKbAxjgsQuLp27aqysrLz1gUHB592qQcqv0o7ThMAAJebncB0IXUIXIQmAAAAGwhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAANhAaAIAALCB0AQAAGADoQkAAMAGQhMAAIANhCYAAAAbCE0AAAA2EJoAAABsIDQBAADYcNGh6Z///Kc6dOig+Ph4/fjjj5KkadOm6f333/dacwAAAP7iokLTrFmzNHr0aPXo0UMFBQUqKyuTJEVFRWnatGne7A8AAMAvXFRoeuWVV/Taa6/piSeeUHBwsDW/bdu22rJli9eaAwAA8BcXFZp27dqlP/7xj6fNd7lcKioq+t1NAQAA+JuLCk0NGzZUbm7uafOXLVumZs2a/d6eAAAA/E61i3nS6NGjlZ6erhMnTsgYo3Xr1untt9/W5MmT9frrr3u7RwAAAJ+7qNA0ePBghYWFafz48frll1903333KT4+XtOnT1ffvn293SMAAIDPXVRokqR+/fqpX79++uWXX3Ts2DHFxMR4sy8AAAC/clGhadeuXTp58qSuvvpqVa9eXdWrV5ckffPNNwoJCVGDBg282SMAAIDPXdSF4AMGDNCaNWtOm//5559rwIABv7cnAAAAv3NRoemLL75Qhw4dTpvfvn37M95VBwAAUNldVGhyOBw6evToafMLCwut0cEBAAACyUWFpk6dOmny5MkeAamsrEyTJ0/WjTfe6LXmAAAA/MVFXQj+3HPPqVOnTmrSpIk6duwoSfr444/ldru1cuVKrzYIAADgDy7qTFPz5s21efNm3XPPPTpw4ICOHj2q/v37a8eOHWrRooW3ewQAAPC5ix6nKT4+Xs8++6w3ewEAAPBbtkPT5s2b1aJFCwUFBWnz5s3nrE1MTPzdjQEAAPgT26GpdevWysvLU0xMjFq3bi2HwyFjzGl1DoeDO+gAAEDAsR2adu3apejoaOv/AAAAVYnt0FS/fn1JUmlpqZ588kn99a9/VcOGDS9ZYwAAAP7kgu+eCwkJ0bvvvnspegEAAPBbFzXkQK9evbRw4cLfvfHVq1frjjvuUHx8vBwOx2nrHDBggBwOh8d06623etQcOXJE/fr1U0REhKKiopSWlqZjx4551GzevFkdO3ZUaGioEhISNGXKlNN6WbBggZo2barQ0FC1bNlSH3zwwe/ePwAAEDguasiBq6++WpMmTdKnn36qNm3aKDw83GP5iBEjbK2nqKhIrVq10qBBg3TXXXedsebWW2/V3Llzrccul8tjeb9+/bR//35lZWWptLRUAwcO1JAhQzRv3jxJktvtVvfu3dWtWzfNnj1bW7Zs0aBBgxQVFaUhQ4ZIktasWaN7771XkydP1u2336558+apV69e2rRpE+NOAQAASZLDnOkWuPM417VMDodD33///YU34nDovffeU69evax5AwYMUEFBwVnPam3fvl3NmzfX+vXr1bZtW0nSsmXL1KNHD+3du1fx8fGaNWuWnnjiCeXl5cnpdEqSHn/8cS1cuFA7duyQJPXp00dFRUVavHixte727durdevWmj17tq3+3W63IiMjVVhYqIiIiAvef/i3zp07267Nycm5ZH0A8D6O76rtQt6/L+rjuV27dlnT999/r++//97jsTfl5OQoJiZGTZo00UMPPaTDhw9by9auXauoqCgrMElSt27dFBQUpM8//9yq6dSpkxWYJCklJUU7d+7Uzz//bNV069bNY7spKSlau3atV/cFAABUXhcVmiTpv/7rv9SiRQuFhoYqNDRULVq00Ouvv+7N3nTrrbfqH//4h7Kzs/Xcc89p1apVuu2226xxoCrGjTpVtWrVVKtWLeXl5Vk1sbGxHjUVj89XU7H8TIqLi+V2uz0mAAAQuC7qmqaMjAy99NJLGj58uJKTkyX9erZm1KhR2r17tyZNmuSV5vr27Wv9v2XLlkpMTFSjRo2Uk5Ojrl27emUbF2vy5Ml68sknfdoDAAC4fC4qNM2aNUuvvfaa7r33Xmvef/zHfygxMVHDhw/3Wmj6rauuukq1a9fWt99+q65duyouLk4HDhzwqDl58qSOHDmiuLg4SVJcXJzy8/M9aioen6+mYvmZjBs3TqNHj7Yeu91uJSQkXPzOAQAAv3ZRH8+VlpZ6XEdUoU2bNjp58uTvbups9u7dq8OHD6tOnTqSpOTkZBUUFGjjxo1WzcqVK1VeXq6kpCSrZvXq1SotLbVqsrKy1KRJE11xxRVWTXZ2tse2srKyrLNoZ+JyuRQREeExAQCAwHVRoemBBx7QrFmzTps/Z84c9evXz/Z6jh07ptzcXOXm5kr69QLz3Nxc7d69W8eOHdOYMWP02Wef6YcfflB2drbuvPNONW7cWCkpKZKkZs2a6dZbb9WDDz6odevW6dNPP9WwYcPUt29fxcfHS5Luu+8+OZ1OpaWladu2bZo/f76mT5/ucZbo4Ycf1rJly/Tiiy9qx44dmjhxojZs2KBhw4ZdzMsDAAAC0EV9PCf9eiH4ihUr1L59e0nS559/rt27d6t///4egeSll1466zo2bNigLl26WI8rnpeamqpZs2Zp8+bNevPNN1VQUKD4+Hh1795dTz31lMdYTW+99ZaGDRumrl27KigoSL1799bLL79sLY+MjNSKFSuUnp6uNm3aqHbt2srIyLDGaJKkG264QfPmzdP48eP1l7/8RVdffbUWLlzIGE0AAMByUeM0nRp0zrlyh0MrV6684KYqI8ZpCmyM4wIELo7vqu1C3r8v6kzTRx99dFGNAQAAVFYXPU4TAABAVUJoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAANhAaAIAALCB0AQAAGADoQkAAMAGQhMAAIANhCYAAAAbCE0AAAA2EJoAAABsIDQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAGwhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAANhAaAIAALCB0AQAAGADoQkAAMAGQhMAAIANhCYAAAAbCE0AAAA2EJoAAABsIDQBAADY4NPQtHr1at1xxx2Kj4+Xw+HQwoULPZYbY5SRkaE6deooLCxM3bp10zfffONRc+TIEfXr108RERGKiopSWlqajh075lGzefNmdezYUaGhoUpISNCUKVNO62XBggVq2rSpQkND1bJlS33wwQde318AAFB5+TQ0FRUVqVWrVpo5c+YZl0+ZMkUvv/yyZs+erc8//1zh4eFKSUnRiRMnrJp+/fpp27ZtysrK0uLFi7V69WoNGTLEWu52u9W9e3fVr19fGzdu1PPPP6+JEydqzpw5Vs2aNWt07733Ki0tTV988YV69eqlXr16aevWrZdu5wEAQKXiMMYYXzchSQ6HQ++995569eol6dezTPHx8XrkkUf06KOPSpIKCwsVGxurzMxM9e3bV9u3b1fz5s21fv16tW3bVpK0bNky9ejRQ3v37lV8fLxmzZqlJ554Qnl5eXI6nZKkxx9/XAsXLtSOHTskSX369FFRUZEWL15s9dO+fXu1bt1as2fPttW/2+1WZGSkCgsLFRER4a2XBX6ic+fOtmtzcnIuWR8AvI/ju2q7kPdvv72madeuXcrLy1O3bt2seZGRkUpKStLatWslSWvXrlVUVJQVmCSpW7duCgoK0ueff27VdOrUyQpMkpSSkqKdO3fq559/tmpO3U5FTcV2zqS4uFhut9tjAgAAgctvQ1NeXp4kKTY21mN+bGystSwvL08xMTEey6tVq6ZatWp51JxpHadu42w1FcvPZPLkyYqMjLSmhISEC91FAABQifhtaPJ348aNU2FhoTXt2bPH1y0BAIBLyG9DU1xcnCQpPz/fY35+fr61LC4uTgcOHPBYfvLkSR05csSj5kzrOHUbZ6upWH4mLpdLERERHhMAAAhcfhuaGjZsqLi4OGVnZ1vz3G63Pv/8cyUnJ0uSkpOTVVBQoI0bN1o1K1euVHl5uZKSkqya1atXq7S01KrJyspSkyZNdMUVV1g1p26noqZiOwAAAD4NTceOHVNubq5yc3Ml/Xrxd25urnbv3i2Hw6GRI0fq6aef1v/8z/9oy5Yt6t+/v+Lj46077Jo1a6Zbb71VDz74oNatW6dPP/1Uw4YNU9++fRUfHy9Juu++++R0OpWWlqZt27Zp/vz5mj59ukaPHm318fDDD2vZsmV68cUXtWPHDk2cOFEbNmzQsGHDLvdLAgAA/FQ1X258w4YN6tKli/W4IsikpqYqMzNTjz32mIqKijRkyBAVFBToxhtv1LJlyxQaGmo956233tKwYcPUtWtXBQUFqXfv3nr55Zet5ZGRkVqxYoXS09PVpk0b1a5dWxkZGR5jOd1www2aN2+exo8fr7/85S+6+uqrtXDhQrVo0eIyvAoAAKAy8Jtxmio7xmkKbIzjAgQuju+qLSDGaQIAAPAnhCYAAAAbCE0AAAA2EJoAAABsIDQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAGwhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAANhQzdcNAAACx4kTJ7R7925ft3HJfP31175u4YLVq1dPoaGhvm4jIBCaAABes3v3bg0ZMsTXbVwylXHf5syZo2uuucbXbQQEQhMuO34T9T/8JgpvqVevnubMmePrNi7IhQShyrZv0q9fE3iHwxhjfN1EIHC73YqMjFRhYaEiIiJ83Y5f+/rrryvlb2uBjN9EUZV98MEHmjJlynnrHnvsMfXo0eMydITL6ULevwlNXkJosq8ynmmqCr+JcqYJVVnnzp3PW5OTk3PJ+8DlR2jyAUJTYNuwYYMeffTR89a98MILatu27WXoCIC3nSs4EZgC14W8fzPkAGCD3SBEYAIqr5ycHD322GMe8x577DECEyyEJsCm8/3g5AcrUPn16NHD+oh9zpw5XMMED4Qm4ALk5OTohRde8Jj3wgsvEJgAoAogNAEXqG3bth6/ifKRHABUDYQmAAAAGwhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgAAABsITQAAADYQmgAAAGzw69A0ceJEORwOj6lp06bW8hMnTig9PV1XXnmlatSood69eys/P99jHbt371bPnj1VvXp1xcTEaMyYMTp58qRHTU5Ojq677jq5XC41btxYmZmZl2P3AABAJeLXoUmSrr32Wu3fv9+aPvnkE2vZqFGjtGjRIi1YsECrVq3Svn37dNddd1nLy8rK1LNnT5WUlGjNmjV68803lZmZqYyMDKtm165d6tmzp7p06aLc3FyNHDlSgwcP1vLlyy/rfgIAAP9WzdcNnE+1atUUFxd32vzCwkL913/9l+bNm6ebb75ZkjR37lw1a9ZMn332mdq3b68VK1boq6++0ocffqjY2Fi1bt1aTz31lMaOHauJEyfK6XRq9uzZatiwoV588UVJUrNmzfTJJ59o6tSpSklJuaz7CgAA/Jffn2n65ptvFB8fr6uuukr9+vXT7t27JUkbN25UaWmpunXrZtU2bdpU9erV09q1ayVJa9euVcuWLRUbG2vVpKSkyO12a9u2bVbNqeuoqKlYx9kUFxfL7XZ7TAAAIHD5dWhKSkpSZmamli1bplmzZmnXrl3q2LGjjh49qry8PDmdTkVFRXk8JzY2Vnl5eZKkvLw8j8BUsbxi2blq3G63jh8/ftbeJk+erMjISGtKSEj4vbsLAAD8mF9/PHfbbbdZ/09MTFRSUpLq16+vd955R2FhYT7sTBo3bpxGjx5tPXa73QQnAAACmF+fafqtqKgoXXPNNfr2228VFxenkpISFRQUeNTk5+db10DFxcWddjddxePz1URERJwzmLlcLkVERHhMAAAgcFWq0HTs2DF99913qlOnjtq0aaOQkBBlZ2dby3fu3Kndu3crOTlZkpScnKwtW7bowIEDVk1WVpYiIiLUvHlzq+bUdVTUVKwDAABA8vPQ9Oijj2rVqlX64YcftGbNGv3pT39ScHCw7r33XkVGRiotLU2jR4/WRx99pI0bN2rgwIFKTk5W+/btJUndu3dX8+bN9cADD+jLL7/U8uXLNX78eKWnp8vlckmShg4dqu+//16PPfaYduzYoVdffVXvvPOORo0a5ctdBwAAfsavr2nau3ev7r33Xh0+fFjR0dG68cYb9dlnnyk6OlqSNHXqVAUFBal3794qLi5WSkqKXn31Vev5wcHBWrx4sR566CElJycrPDxcqampmjRpklXTsGFDLVmyRKNGjdL06dNVt25dvf766ww3AAAAPPh1aPrXv/51zuWhoaGaOXOmZs6cedaa+vXr64MPPjjnejp37qwvvvjionoEAABVg19/PAcAAOAvCE0AAAA2EJoAAABsIDQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAG/x6RHCcLj8/X4WFhb5uo8r78ccfPf6Fb0VGRio2NtbXbfxuHN/+gePbv/jT8e0wxhhfNxEI3G63IiMjVVhYqIiIiEuyjfz8fN3/QH+VlhRfkvUDlVWI06X//uc//OYH68XIz89X/wfuV3FJqa9bAfyKyxmif/zzvy/Z8X0h79+caapECgsLVVpSrONX3aTy0EhftwP4haAThdL3q1RYWFipQ1NhYaGKS0o1tPlRxYeX+bodwC/sKwrW7K9q+s3xTWiqhMpDI1UeXtvXbQC4BOLDy9SgJqEJ8EdcCA4AAGADoQkAAMAGQhMAAIANhCYAAAAbCE0AAAA2EJoAAABsIDQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAGwhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsKGarxsAAPx/+4qCfd0C4Df87XggNAGAH5n9VU1ftwDgLAhNAOBHhjY/qvjwMl+3AfiFfUXBfvWLBKGpEgo6XuDrFgC/EWjHQ3x4mRrUJDQB/ojQVAmF7Vrt6xYAAKhyCE2V0PGGnVQeFuXrNgC/EHS8gF8kAFwWhKZKqDwsSuXhtX3dBgAAVQqhqRIKOlHo6xYAvxFox4O/3WIN+JK/HQ+EpkokMjJSIU6X9P0qX7cC+JUQp0uRkZG+buN3iYyMlMsZ4ld3CgH+wOUM8Zvj22GMMb5uIhC43W5FRkaqsLBQERERl2w7+fn5KiwMrN+sK6Mff/xRzzzzjJ544gnVr1/f1+1UeZGRkYqNjfV1G78bx7d/4Pj2L5f6+L6Q92/ONFUysbGxAfHmECjq16+va665xtdtIEBwfPsXjm/8Fn97DgAAwAZCEwAAgA2Ept+YOXOmGjRooNDQUCUlJWndunW+bgkAAPgBrmk6xfz58zV69GjNnj1bSUlJmjZtmlJSUrRz507FxMT4ur2AceLECe3evdvXbfwuP/74o8e/lV29evUUGhrq6zYQADi+/Q/Ht/dw99wpkpKS1K5dO82YMUOSVF5eroSEBA0fPlyPP/74OZ97ue6eCwRff/21hgwZ4us2cIo5c+ZwwSu8guPb/3B8nxt3z12EkpISbdy4UePGjbPmBQUFqVu3blq7du1p9cXFxSouLrYeu93uy9JnIKhXr57mzJnj6zZwinr16vm6BQQIjm//w/HtPYSm/3Xo0CGVlZWddrtvbGysduzYcVr95MmT9eSTT16u9gJKaGgov/UAAYrjG4GMC8Ev0rhx41RYWGhNe/bs8XVLAADgEuJM0/+qXbu2goODlZ+f7zE/Pz9fcXFxp9W7XC65XK7L1R4AAPAxzjT9L6fTqTZt2ig7O9uaV15eruzsbCUnJ/uwMwAA4A8403SK0aNHKzU1VW3bttX111+vadOmqaioSAMHDvR1awAAwMcITafo06ePDh48qIyMDOXl5al169ZatmwZfwsKAAAwTpO3ME4TAACVz4W8f3NNEwAAgA2EJgAAABsITQAAADYQmgAAAGwgNAEAANhAaAIAALCB0AQAAGADg1t6ScVwV26328edAAAAuyret+0MW0lo8pKjR49KkhISEnzcCQAAuFBHjx5VZGTkOWsYEdxLysvLtW/fPtWsWVMOh8PX7eASc7vdSkhI0J49exgBHggwHN9VizFGR48eVXx8vIKCzn3VEmeavCQoKEh169b1dRu4zCIiIvihCgQoju+q43xnmCpwITgAAIANhCYAAAAbCE3ARXC5XJowYYJcLpevWwHgZRzfOBsuBAcAALCBM00AAAA2EJoAAABsIDQBAADYQGgCfqcGDRpo2rRp1mOHw6GFCxf6rB8AgaFz584aOXKkr9vAKQhNqPQGDBggh8Nx2nTrrbf6ujWv+W0wAwLNHXfccdZj9uOPP5bD4dDmzZsva08lJSV6/vnndd111yk8PFyRkZFq1aqVxo8fr3379l3WXuAfCE0ICLfeeqv279/vMb399tu+bguATWlpacrKytLevXtPWzZ37ly1bdtWiYmJF7zekpKSi+qnuLhYt9xyi5599lkNGDBAq1ev1pYtW/Tyyy/r0KFDeuWVVy5qvajcCE0ICC6XS3FxcR7TFVdcoZycHDmdTn388cdW7ZQpUxQTE6P8/HxJUkFBgf7zP/9TsbGxCg0NVYsWLbR48WKr/pNPPlHHjh0VFhamhIQEjRgxQkVFRbZ727Nnj+655x5FRUWpVq1auvPOO/XDDz9YywcMGKBevXrphRdeUJ06dXTllVcqPT1dpaWlkn49Rf/jjz9q1KhR1lk0INDcfvvtio6OVmZmpsf8Y8eOacGCBUpLS5N0/uOxQYMGeuqpp9S/f39FRERoyJAhuvnmmzVs2DCP9R48eFBOp1PZ2dln7Gfq1Kn65JNPtHLlSo0YMUJt2rRRvXr1dNNNN2n27Nl69tlnrdri4mKNGDFCMTExCg0N1Y033qj169d7rG/VqlW6/vrr5XK5VKdOHT3++OM6efKktbyoqEj9+/dXjRo1VKdOHb344osX9TriEjNAJZeammruvPPOsy4fM2aMqV+/vikoKDCbNm0yTqfTvP/++8YYY8rKykz79u3Ntddea1asWGG+++47s2jRIvPBBx8YY4z59ttvTXh4uJk6dar5+uuvzaeffmr++Mc/mgEDBljrr1+/vpk6dar1WJJ57733jDHGlJSUmGbNmplBgwaZzZs3m6+++srcd999pkmTJqa4uNjqPyIiwgwdOtRs377dLFq0yFSvXt3MmTPHGGPM4cOHTd26dc2kSZPM/v37zf79+7346gH+Y8yYMaZRo0amvLzcmvfGG2+YsLAwU1BQYPt4jIiIMC+88IL59ttvzbfffmveeustc8UVV5gTJ05YdS+99JJp0KCBx7ZOlZiYaFJSUmz1PWLECBMfH28++OADs23bNpOammquuOIKc/jwYWOMMXv37jXVq1c3f/7zn8327dvNe++9Z2rXrm0mTJhgreOhhx4y9erVMx9++KHZvHmzuf32203NmjXNww8/fAGvIC41QhMqvdTUVBMcHGzCw8M9pmeeecYYY0xxcbFp3bq1ueeee0zz5s3Ngw8+aD13+fLlJigoyOzcufOM605LSzNDhgzxmPfxxx+boKAgc/z4cWPMuUPTP//5T9OkSROPH8zFxcUmLCzMLF++3Oq/fv365uTJk1bN//k//8f06dPHevzbbQCBaPv27UaS+eijj6x5HTt2NPfff78xxv7x2KtXL4+a48ePmyuuuMLMnz/fmpeYmGgmTpx41l5CQ0PNiBEjPOb16tXL+vmSnJxsjDHm2LFjJiQkxLz11ltWXUlJiYmPjzdTpkwxxhjzl7/85bSfAzNnzjQ1atQwZWVl5ujRo8bpdJp33nnHWn748GETFhZGaPIz1Xx8ogvwii5dumjWrFke82rVqiVJcjqdeuutt5SYmKj69etr6tSpVk1ubq7q1q2ra6655ozr/fLLL7V582a99dZb1jxjjMrLy7Vr1y41a9bsnH19+eWX+vbbb1WzZk2P+SdOnNB3331nPb722msVHBxsPa5Tp462bNlynr0GAkvTpk11ww036I033lDnzp317bff6uOPP9akSZMk2T8e27Zt67He0NBQPfDAA3rjjTd0zz33aNOmTdq6dav+53/+54L6e/XVV1VUVKSXX35Zq1evliR99913Ki0tVYcOHay6kJAQXX/99dq+fbskafv27UpOTvb4aL1Dhw46duyY9u7dq59//lklJSVKSkqylteqVUtNmjS5oP5w6RGaEBDCw8PVuHHjsy5fs2aNJOnIkSM6cuSIwsPDJUlhYWHnXO+xY8f0n//5nxoxYsRpy+rVq3fevo4dO6Y2bdp4/JCvEB0dbf0/JCTEY5nD4VB5efl51w8EmrS0NA0fPlwzZ87U3Llz1ahRI910002S7B+PFcf3qQYPHqzWrVtr7969mjt3rm6++WbVr1//rH1cffXV2rlzp8e8OnXqSPr/v5Ch6uFCcAS87777TqNGjdJrr72mpKQkpaamWoEkMTFRe/fu1ddff33G51533XX66quv1Lhx49Mmp9N53m1fd911+uabbxQTE3Pa8yMjI23vg9PpVFlZme16oLK65557FBQUpHnz5ukf//iHBg0aZJ2h+T3HY8uWLdW2bVu99tprmjdvngYNGnTO+nvvvVdZWVn64osvzlnXqFEjOZ1Offrpp9a80tJSrV+/Xs2bN5ckNWvWTGvXrpU55U+9fvrpp6pZs6bq1q2rRo0aKSQkRJ9//rm1/Oeffz7rzyX4DqEJAaG4uFh5eXke06FDh1RWVqb7779fKSkpGjhwoObOnavNmzdbd6bcdNNN6tSpk3r37q2srCzt2rVLS5cu1bJlyyRJY8eO1Zo1azRs2DDl5ubqm2++0fvvv3/anThn069fP9WuXVt33nmnPv74Y+3atUs5OTkaMWLEGW+tPpsGDRpo9erV+umnn3To0KELf4GASqJGjRrq06ePxo0bp/3792vAgAHWst97PA4ePFh/+9vfZIzRn/70p3PWjho1SsnJyerataumT5+uTZs2adeuXVq+fLmWLl1qfZweHh6uhx56SGPGjNGyZcv01Vdf6cEHH9Qvv/xi3fH35z//WXv27NHw4cO1Y8cOvf/++5owYYJGjx6toKAg1ahRQ2lpaRozZoxWrlyprVu3asCAAQoK4i3a7/j2kirg90tNTTWSTpuaNGlinnzySVOnTh1z6NAhq/7dd981TqfT5ObmGmN+veBy4MCB5sorrzShoaGmRYsWZvHixVb9unXrzC233GJq1KhhwsPDTWJionWRuTHnvhDcGGP2799v+vfvb2rXrm1cLpe56qqrzIMPPmgKCwut/n9799/DDz9sbrrpJuvx2rVrTWJionG5XIbDFoFuzZo1RpLp0aPHacsu9Hg81dGjR6272Ow4ceKE+dvf/mZatWplwsLCjMvlMk2bNjWjRo0yu3fvtuqOHz9uhg8fbh3jHTp0MOvWrfNYV05OjmnXrp1xOp0mLi7OjB071pSWlnr0dv/995vq1aub2NhYM2XKFHPTTTdxIbifcRhzyvlCAAAC1A8//KBGjRpp/fr1uu6663zdDiohQhMAIKCVlpbq8OHDevTRR7Vr1y6P64+AC8EHpgCAgPbpp5+qTp06Wr9+vWbPnu3rdlCJcaYJAADABs40AQAA2EBoAgAAsIHQBAAAYAOhCQAAwAZCEwAAgA2EJgD4HTIzMxUVFeXrNgBcBoQmAAAAGwhNAKq88vJyTZkyRY0bN5bL5VK9evX0zDPPKCcnRw6HQwUFBVZtbm6uHA6HfvjhB+Xk5GjgwIEqLCyUw+GQw+HQxIkTfbYfAC6tar5uAAB8bdy4cXrttdc0depU3Xjjjdq/f7927Nhx3ufdcMMNmjZtmjIyMrRz505JUo0aNS51uwB8hNAEoEo7evSopk+frhkzZig1NVWS1KhRI914443Kyck553OdTqciIyPlcDgUFxd3GboF4Et8PAegStu+fbuKi4vVtWtXX7cCwM8RmgBUaWFhYWddFhT064/IU/9EZ2lp6SXvCYB/IjQBqNKuvvpqhYWFKTs7+7Rl0dHRkqT9+/db83Jzcz1qnE6nysrKLmmPAPwD1zQBqNJCQ0M1duxYPfbYY3I6nerQoYMOHjyobdu2qX///kpISNDEiRP1zDPP6Ouvv9aLL77o8fwGDRro2LFjys7OVqtWrVS9enVVr17dR3sD4FLiTBOAKu+vf/2rHnnkEWVkZKhZs2bq06ePDhw4oJCQEL399tvasWOHEhMT9dxzz+npp5/2eO4NN9ygoUOHqk+fPoqOjtaUKVN8tBcALjWHOfXDegAAAJwRZ5oAAABsIDQBAADYQGgCAACwgdAEAABgA6EJAADABkITAACADYQmAAAAGwhNAAAANhCaAAAAbCA0AQAA2EBoAgAAsIHQBAAAYMP/AzLRCTzXiF2yAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 1.4"
      ],
      "metadata": {
        "id": "t7UD49SsTpZe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot counts by color, cut, and clarity\n",
        "plt.figure(figsize=(10, 12))\n",
        "plt.subplot(3, 1, 1)\n",
        "sns.countplot(x='color', order = ['D' ,'E', 'F', 'G', 'H' , 'I', 'J', 'K', 'L', 'M'], data=diamonds, palette='viridis')\n",
        "plt.title('Counts by Color')\n",
        "\n",
        "plt.subplot(3, 1, 2)\n",
        "sns.countplot(x='cut', data=diamonds, palette='viridis')\n",
        "plt.title('Counts by Cut')\n",
        "\n",
        "plt.subplot(3, 1, 3)\n",
        "sns.countplot(x='clarity', data=diamonds, order=['I3', 'I2', 'I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF'], palette='viridis')\n",
        "plt.title('Counts by Clarity')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4RNyZzNKTpZe",
        "outputId": "568f1a3e-28c0-460c-ba32-37d533166e43"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-34-98b8521630b7>:4: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='color', order = ['D' ,'E', 'F', 'G', 'H' , 'I', 'J', 'K', 'L', 'M'], data=diamonds, palette='viridis')\n",
            "<ipython-input-34-98b8521630b7>:8: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='cut', data=diamonds, palette='viridis')\n",
            "<ipython-input-34-98b8521630b7>:12: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x='clarity', data=diamonds, order=['I3', 'I2', 'I1', 'SI2', 'SI1', 'VS2', 'VS1', 'VVS2', 'VVS1', 'IF'], palette='viridis')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1200 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Question 2"
      ],
      "metadata": {
        "id": "pSBUro5LT0MB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 2.1\n"
      ],
      "metadata": {
        "id": "A9rXW6CnTpi1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "LomXmMm7Tpi1"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = finalDiamonds.drop(columns=['price'])  # Feature columns\n",
        "Y = finalDiamonds['price']  # Target variable"
      ],
      "metadata": {
        "id": "1Gqw1bqnboSD"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "h98nFI5mePMc",
        "outputId": "6bbbb8a0-6c7b-4154-ff5e-c134d54a9f16"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        carat  depth_percent  table_percent  length  width  depth  \\\n",
              "0        0.09           62.7           59.0    2.85   2.87   1.79   \n",
              "1        0.09           61.9           59.0    2.84   2.89   1.78   \n",
              "2        0.09           61.1           59.0    2.88   2.90   1.77   \n",
              "3        0.09           62.0           59.0    2.86   2.88   1.78   \n",
              "4        0.09           64.9           58.5    2.79   2.83   1.82   \n",
              "...       ...            ...            ...     ...    ...    ...   \n",
              "149866   2.01           63.0           59.0    7.98   8.03   5.05   \n",
              "149867   1.90           62.7           57.0    7.82   7.87   4.92   \n",
              "149868   2.45           61.2           60.0    8.58   8.65   5.28   \n",
              "149869   2.50           59.1           62.0    8.80   8.85   5.22   \n",
              "149870   1.50           62.9           56.0    7.25   7.30   4.58   \n",
              "\n",
              "        cut_encoded  symmetry_encoded  polish_encoded  color_encoded  \\\n",
              "0                 2                 1               1              9   \n",
              "1                 1                 1               1              9   \n",
              "2                 2                 1               1              9   \n",
              "3                 2                 1               1              9   \n",
              "4                 1                 1               2              9   \n",
              "...             ...               ...             ...            ...   \n",
              "149866            2                 2               2              7   \n",
              "149867            2                 2               2              8   \n",
              "149868            2                 2               2              5   \n",
              "149869            2                 2               2              4   \n",
              "149870            2                 2               2             10   \n",
              "\n",
              "        clarity_encoded  girdle_max_encoded  girdle_min_encoded  \n",
              "0                     8                  10                  10  \n",
              "1                     8                   9                   9  \n",
              "2                     8                  10                   6  \n",
              "3                     8                   9                  10  \n",
              "4                     8                   9                   9  \n",
              "...                 ...                 ...                 ...  \n",
              "149866                7                   9                   9  \n",
              "149867                6                   0                   0  \n",
              "149868                9                   0                   0  \n",
              "149869                8                   9                  10  \n",
              "149870                9                   9                   6  \n",
              "\n",
              "[149871 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c719296b-324b-4ab3-9c0a-095ec7220365\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carat</th>\n",
              "      <th>depth_percent</th>\n",
              "      <th>table_percent</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>depth</th>\n",
              "      <th>cut_encoded</th>\n",
              "      <th>symmetry_encoded</th>\n",
              "      <th>polish_encoded</th>\n",
              "      <th>color_encoded</th>\n",
              "      <th>clarity_encoded</th>\n",
              "      <th>girdle_max_encoded</th>\n",
              "      <th>girdle_min_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.09</td>\n",
              "      <td>62.7</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.85</td>\n",
              "      <td>2.87</td>\n",
              "      <td>1.79</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.09</td>\n",
              "      <td>61.9</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.84</td>\n",
              "      <td>2.89</td>\n",
              "      <td>1.78</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.09</td>\n",
              "      <td>61.1</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.88</td>\n",
              "      <td>2.90</td>\n",
              "      <td>1.77</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.09</td>\n",
              "      <td>62.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.86</td>\n",
              "      <td>2.88</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.09</td>\n",
              "      <td>64.9</td>\n",
              "      <td>58.5</td>\n",
              "      <td>2.79</td>\n",
              "      <td>2.83</td>\n",
              "      <td>1.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149866</th>\n",
              "      <td>2.01</td>\n",
              "      <td>63.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>7.98</td>\n",
              "      <td>8.03</td>\n",
              "      <td>5.05</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149867</th>\n",
              "      <td>1.90</td>\n",
              "      <td>62.7</td>\n",
              "      <td>57.0</td>\n",
              "      <td>7.82</td>\n",
              "      <td>7.87</td>\n",
              "      <td>4.92</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149868</th>\n",
              "      <td>2.45</td>\n",
              "      <td>61.2</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.58</td>\n",
              "      <td>8.65</td>\n",
              "      <td>5.28</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149869</th>\n",
              "      <td>2.50</td>\n",
              "      <td>59.1</td>\n",
              "      <td>62.0</td>\n",
              "      <td>8.80</td>\n",
              "      <td>8.85</td>\n",
              "      <td>5.22</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149870</th>\n",
              "      <td>1.50</td>\n",
              "      <td>62.9</td>\n",
              "      <td>56.0</td>\n",
              "      <td>7.25</td>\n",
              "      <td>7.30</td>\n",
              "      <td>4.58</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>9</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>149871 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c719296b-324b-4ab3-9c0a-095ec7220365')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c719296b-324b-4ab3-9c0a-095ec7220365 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c719296b-324b-4ab3-9c0a-095ec7220365');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d3b3d239-66dd-4d55-812f-b1a47e435e97\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d3b3d239-66dd-4d55-812f-b1a47e435e97')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d3b3d239-66dd-4d55-812f-b1a47e435e97 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Standardize feature columns\n",
        "scaler = StandardScaler()\n",
        "X_Scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "qfMCDnAXa9Kp"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the standardized feature columns back to a DataFrame\n",
        "X_Scaled_df = pd.DataFrame(X_Scaled, columns=X.columns)"
      ],
      "metadata": {
        "id": "C6SszdM2fAfg"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display the first few rows of the standardized dataset\n",
        "print(\"Standardized Dataset:\")\n",
        "print(X_Scaled_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8xm4KKU_dHKn",
        "outputId": "85912cae-2301-411f-c4dd-f0a410fd1f86"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Standardized Dataset:\n",
            "           carat  depth_percent  table_percent    length     width     depth  \\\n",
            "0      -1.157106       0.215866       0.345119 -2.146391 -2.078247 -0.730430   \n",
            "1      -1.157106       0.014689       0.345119 -2.156289 -2.059209 -0.735681   \n",
            "2      -1.157106      -0.186488       0.345119 -2.116697 -2.049690 -0.740932   \n",
            "3      -1.157106       0.039836       0.345119 -2.136493 -2.068728 -0.735681   \n",
            "4      -1.157106       0.769101       0.218693 -2.205778 -2.116324 -0.714676   \n",
            "...          ...            ...            ...       ...       ...       ...   \n",
            "149866  3.631605       0.291307       0.345119  2.931233  2.833676  0.981472   \n",
            "149867  3.357252       0.215866      -0.160588  2.772867  2.681369  0.913206   \n",
            "149868  4.729018      -0.161341       0.597973  3.525108  3.423869  1.102251   \n",
            "149869  4.853724      -0.689429       1.103680  3.742861  3.614253  1.070743   \n",
            "149870  2.359604       0.266160      -0.413441  2.208686  2.138772  0.734664   \n",
            "\n",
            "        cut_encoded  symmetry_encoded  polish_encoded  color_encoded  \\\n",
            "0          0.518390         -1.746964       -2.522184       0.916097   \n",
            "1         -1.929051         -1.746964       -2.522184       0.916097   \n",
            "2          0.518390         -1.746964       -2.522184       0.916097   \n",
            "3          0.518390         -1.746964       -2.522184       0.916097   \n",
            "4         -1.929051         -1.746964        0.396482       0.916097   \n",
            "...             ...               ...             ...            ...   \n",
            "149866     0.518390          0.572422        0.396482       0.067308   \n",
            "149867     0.518390          0.572422        0.396482       0.491702   \n",
            "149868     0.518390          0.572422        0.396482      -0.781482   \n",
            "149869     0.518390          0.572422        0.396482      -1.205877   \n",
            "149870     0.518390          0.572422        0.396482       1.340492   \n",
            "\n",
            "        clarity_encoded  girdle_max_encoded  girdle_min_encoded  \n",
            "0              0.811981            1.005942            0.889489  \n",
            "1              0.811981            0.772475            0.669287  \n",
            "2              0.811981            1.005942            0.008682  \n",
            "3              0.811981            0.772475            0.889489  \n",
            "4              0.811981            0.772475            0.669287  \n",
            "...                 ...                 ...                 ...  \n",
            "149866         0.279836            0.772475            0.669287  \n",
            "149867        -0.252308           -1.328724           -1.312529  \n",
            "149868         1.344125           -1.328724           -1.312529  \n",
            "149869         0.811981            0.772475            0.889489  \n",
            "149870         1.344125            0.772475            0.008682  \n",
            "\n",
            "[149871 rows x 13 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_Scaled_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 444
        },
        "id": "lVWzGWCvyxYo",
        "outputId": "254144f4-f31a-4274-a77a-7bc006f8ab1f"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           carat  depth_percent  table_percent    length     width     depth  \\\n",
              "0      -1.157106       0.215866       0.345119 -2.146391 -2.078247 -0.730430   \n",
              "1      -1.157106       0.014689       0.345119 -2.156289 -2.059209 -0.735681   \n",
              "2      -1.157106      -0.186488       0.345119 -2.116697 -2.049690 -0.740932   \n",
              "3      -1.157106       0.039836       0.345119 -2.136493 -2.068728 -0.735681   \n",
              "4      -1.157106       0.769101       0.218693 -2.205778 -2.116324 -0.714676   \n",
              "...          ...            ...            ...       ...       ...       ...   \n",
              "149866  3.631605       0.291307       0.345119  2.931233  2.833676  0.981472   \n",
              "149867  3.357252       0.215866      -0.160588  2.772867  2.681369  0.913206   \n",
              "149868  4.729018      -0.161341       0.597973  3.525108  3.423869  1.102251   \n",
              "149869  4.853724      -0.689429       1.103680  3.742861  3.614253  1.070743   \n",
              "149870  2.359604       0.266160      -0.413441  2.208686  2.138772  0.734664   \n",
              "\n",
              "        cut_encoded  symmetry_encoded  polish_encoded  color_encoded  \\\n",
              "0          0.518390         -1.746964       -2.522184       0.916097   \n",
              "1         -1.929051         -1.746964       -2.522184       0.916097   \n",
              "2          0.518390         -1.746964       -2.522184       0.916097   \n",
              "3          0.518390         -1.746964       -2.522184       0.916097   \n",
              "4         -1.929051         -1.746964        0.396482       0.916097   \n",
              "...             ...               ...             ...            ...   \n",
              "149866     0.518390          0.572422        0.396482       0.067308   \n",
              "149867     0.518390          0.572422        0.396482       0.491702   \n",
              "149868     0.518390          0.572422        0.396482      -0.781482   \n",
              "149869     0.518390          0.572422        0.396482      -1.205877   \n",
              "149870     0.518390          0.572422        0.396482       1.340492   \n",
              "\n",
              "        clarity_encoded  girdle_max_encoded  girdle_min_encoded  \n",
              "0              0.811981            1.005942            0.889489  \n",
              "1              0.811981            0.772475            0.669287  \n",
              "2              0.811981            1.005942            0.008682  \n",
              "3              0.811981            0.772475            0.889489  \n",
              "4              0.811981            0.772475            0.669287  \n",
              "...                 ...                 ...                 ...  \n",
              "149866         0.279836            0.772475            0.669287  \n",
              "149867        -0.252308           -1.328724           -1.312529  \n",
              "149868         1.344125           -1.328724           -1.312529  \n",
              "149869         0.811981            0.772475            0.889489  \n",
              "149870         1.344125            0.772475            0.008682  \n",
              "\n",
              "[149871 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b07726a-5605-4b14-9a91-023c6cffcf9b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carat</th>\n",
              "      <th>depth_percent</th>\n",
              "      <th>table_percent</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>depth</th>\n",
              "      <th>cut_encoded</th>\n",
              "      <th>symmetry_encoded</th>\n",
              "      <th>polish_encoded</th>\n",
              "      <th>color_encoded</th>\n",
              "      <th>clarity_encoded</th>\n",
              "      <th>girdle_max_encoded</th>\n",
              "      <th>girdle_min_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>0.215866</td>\n",
              "      <td>0.345119</td>\n",
              "      <td>-2.146391</td>\n",
              "      <td>-2.078247</td>\n",
              "      <td>-0.730430</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>-1.746964</td>\n",
              "      <td>-2.522184</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "      <td>1.005942</td>\n",
              "      <td>0.889489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>0.014689</td>\n",
              "      <td>0.345119</td>\n",
              "      <td>-2.156289</td>\n",
              "      <td>-2.059209</td>\n",
              "      <td>-0.735681</td>\n",
              "      <td>-1.929051</td>\n",
              "      <td>-1.746964</td>\n",
              "      <td>-2.522184</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "      <td>0.772475</td>\n",
              "      <td>0.669287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>-0.186488</td>\n",
              "      <td>0.345119</td>\n",
              "      <td>-2.116697</td>\n",
              "      <td>-2.049690</td>\n",
              "      <td>-0.740932</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>-1.746964</td>\n",
              "      <td>-2.522184</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "      <td>1.005942</td>\n",
              "      <td>0.008682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>0.039836</td>\n",
              "      <td>0.345119</td>\n",
              "      <td>-2.136493</td>\n",
              "      <td>-2.068728</td>\n",
              "      <td>-0.735681</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>-1.746964</td>\n",
              "      <td>-2.522184</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "      <td>0.772475</td>\n",
              "      <td>0.889489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>0.769101</td>\n",
              "      <td>0.218693</td>\n",
              "      <td>-2.205778</td>\n",
              "      <td>-2.116324</td>\n",
              "      <td>-0.714676</td>\n",
              "      <td>-1.929051</td>\n",
              "      <td>-1.746964</td>\n",
              "      <td>0.396482</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "      <td>0.772475</td>\n",
              "      <td>0.669287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149866</th>\n",
              "      <td>3.631605</td>\n",
              "      <td>0.291307</td>\n",
              "      <td>0.345119</td>\n",
              "      <td>2.931233</td>\n",
              "      <td>2.833676</td>\n",
              "      <td>0.981472</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>0.572422</td>\n",
              "      <td>0.396482</td>\n",
              "      <td>0.067308</td>\n",
              "      <td>0.279836</td>\n",
              "      <td>0.772475</td>\n",
              "      <td>0.669287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149867</th>\n",
              "      <td>3.357252</td>\n",
              "      <td>0.215866</td>\n",
              "      <td>-0.160588</td>\n",
              "      <td>2.772867</td>\n",
              "      <td>2.681369</td>\n",
              "      <td>0.913206</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>0.572422</td>\n",
              "      <td>0.396482</td>\n",
              "      <td>0.491702</td>\n",
              "      <td>-0.252308</td>\n",
              "      <td>-1.328724</td>\n",
              "      <td>-1.312529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149868</th>\n",
              "      <td>4.729018</td>\n",
              "      <td>-0.161341</td>\n",
              "      <td>0.597973</td>\n",
              "      <td>3.525108</td>\n",
              "      <td>3.423869</td>\n",
              "      <td>1.102251</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>0.572422</td>\n",
              "      <td>0.396482</td>\n",
              "      <td>-0.781482</td>\n",
              "      <td>1.344125</td>\n",
              "      <td>-1.328724</td>\n",
              "      <td>-1.312529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149869</th>\n",
              "      <td>4.853724</td>\n",
              "      <td>-0.689429</td>\n",
              "      <td>1.103680</td>\n",
              "      <td>3.742861</td>\n",
              "      <td>3.614253</td>\n",
              "      <td>1.070743</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>0.572422</td>\n",
              "      <td>0.396482</td>\n",
              "      <td>-1.205877</td>\n",
              "      <td>0.811981</td>\n",
              "      <td>0.772475</td>\n",
              "      <td>0.889489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149870</th>\n",
              "      <td>2.359604</td>\n",
              "      <td>0.266160</td>\n",
              "      <td>-0.413441</td>\n",
              "      <td>2.208686</td>\n",
              "      <td>2.138772</td>\n",
              "      <td>0.734664</td>\n",
              "      <td>0.518390</td>\n",
              "      <td>0.572422</td>\n",
              "      <td>0.396482</td>\n",
              "      <td>1.340492</td>\n",
              "      <td>1.344125</td>\n",
              "      <td>0.772475</td>\n",
              "      <td>0.008682</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>149871 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b07726a-5605-4b14-9a91-023c6cffcf9b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b07726a-5605-4b14-9a91-023c6cffcf9b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b07726a-5605-4b14-9a91-023c6cffcf9b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-40c334eb-25a8-4dc8-8d03-142d745b4703\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40c334eb-25a8-4dc8-8d03-142d745b4703')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-40c334eb-25a8-4dc8-8d03-142d745b4703 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_Scaled_df"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 2.2"
      ],
      "metadata": {
        "id": "UXvsW9ZlTpuj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_selection import mutual_info_regression, f_regression\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error"
      ],
      "metadata": {
        "id": "yZ6XUJRTTpuj"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the standardized feature columns back to a DataFrame\n",
        "X_Scaled_df = pd.DataFrame(X_Scaled, columns=X.columns)"
      ],
      "metadata": {
        "id": "0nQclQmr8y6L"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate mutual information between features and target\n",
        "mi_scores = mutual_info_regression(X_Scaled, Y)\n",
        "mi_scores_df = pd.DataFrame({'Feature': X.columns, 'MI Score': mi_scores})\n",
        "mi_scores_df = mi_scores_df.sort_values(by='MI Score')\n",
        "\n",
        "# Calculate F-scores\n",
        "f_scores, p_values = f_regression(X_Scaled, Y)\n",
        "\n",
        "# Merge MI and F-scores into a single dataframe\n",
        "scores_df = pd.DataFrame({'Feature': X.columns, 'MI Score': mi_scores, 'F Score': f_scores , 'P Value': p_values})\n",
        "\n",
        "print(\"Feature Scores:\")\n",
        "print(scores_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SyMs6tmEhB6r",
        "outputId": "b01a9347-6be9-4ce6-cabc-315af3a50ea2"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Scores:\n",
            "               Feature  MI Score        F Score        P Value\n",
            "0                carat  1.374084  755380.195809   0.000000e+00\n",
            "1        depth_percent  0.041904      97.274940   6.131853e-23\n",
            "2        table_percent  0.023953     270.590496   9.540806e-61\n",
            "3               length  1.193890  464517.682462   0.000000e+00\n",
            "4                width  1.206186  364744.610195   0.000000e+00\n",
            "5                depth  1.159145   14789.226399   0.000000e+00\n",
            "6          cut_encoded  0.025205      88.958031   4.087555e-21\n",
            "7     symmetry_encoded  0.023897     333.901556   1.637461e-74\n",
            "8       polish_encoded  0.010875     453.535242  1.730325e-100\n",
            "9        color_encoded  0.183686     334.472819   1.230355e-74\n",
            "10     clarity_encoded  0.168594     107.621796   3.317496e-25\n",
            "11  girdle_max_encoded  0.035837      26.659077   2.430170e-07\n",
            "12  girdle_min_encoded  0.027988       0.099306   7.526642e-01\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the MI and F score thresholds for feature selection. Only keeping features with high correlation with price\n",
        "mi_threshold = 0.1  # Threshold for MI score\n",
        "f_threshold = 1000  # Threshold for F score\n",
        "\n",
        "# Filter features based on MI score and F score thresholds\n",
        "selected_features = scores_df[(scores_df['MI Score'] > mi_threshold)]\n",
        "\n",
        "# Extract selected feature names\n",
        "selected_feature_names = selected_features['Feature'].tolist()\n",
        "\n",
        "# Filter X_scaled_df to keep only the selected features\n",
        "X_Scaled_reduced_df = X_Scaled_df[selected_feature_names]\n",
        "\n",
        "X_Scaled_reduced_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Dq0hv_uNq5ib",
        "outputId": "2513d944-cabf-4f18-a598-e1a4269592bb"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      carat    length     width     depth  color_encoded  clarity_encoded\n",
              "0 -1.157106 -2.146391 -2.078247 -0.730430       0.916097         0.811981\n",
              "1 -1.157106 -2.156289 -2.059209 -0.735681       0.916097         0.811981\n",
              "2 -1.157106 -2.116697 -2.049690 -0.740932       0.916097         0.811981\n",
              "3 -1.157106 -2.136493 -2.068728 -0.735681       0.916097         0.811981\n",
              "4 -1.157106 -2.205778 -2.116324 -0.714676       0.916097         0.811981"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16585e3c-92ce-4685-a519-17141a67a7d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>carat</th>\n",
              "      <th>length</th>\n",
              "      <th>width</th>\n",
              "      <th>depth</th>\n",
              "      <th>color_encoded</th>\n",
              "      <th>clarity_encoded</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>-2.146391</td>\n",
              "      <td>-2.078247</td>\n",
              "      <td>-0.730430</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>-2.156289</td>\n",
              "      <td>-2.059209</td>\n",
              "      <td>-0.735681</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>-2.116697</td>\n",
              "      <td>-2.049690</td>\n",
              "      <td>-0.740932</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>-2.136493</td>\n",
              "      <td>-2.068728</td>\n",
              "      <td>-0.735681</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.157106</td>\n",
              "      <td>-2.205778</td>\n",
              "      <td>-2.116324</td>\n",
              "      <td>-0.714676</td>\n",
              "      <td>0.916097</td>\n",
              "      <td>0.811981</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16585e3c-92ce-4685-a519-17141a67a7d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16585e3c-92ce-4685-a519-17141a67a7d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16585e3c-92ce-4685-a519-17141a67a7d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-222e2549-0c24-4610-898a-ae47199dff66\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-222e2549-0c24-4610-898a-ae47199dff66')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-222e2549-0c24-4610-898a-ae47199dff66 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_Scaled_reduced_df"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Lowest MI Values"
      ],
      "metadata": {
        "id": "Rl6uj1Na5OS4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Print features with the lowest MI and F scores\n",
        "print(\"Features with the lowest mutual information scores:\")\n",
        "print(scores_df.nsmallest(2, 'MI Score'))\n",
        "\n",
        "print(\"\\nFeatures with the lowest F scores:\")\n",
        "print(scores_df.nsmallest(2, 'F Score'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wOaYOROZjYvM",
        "outputId": "b7981a26-d248-491c-8876-2e642b567e6e"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features with the lowest mutual information scores:\n",
            "            Feature  MI Score     F Score        P Value\n",
            "8    polish_encoded  0.010875  453.535242  1.730325e-100\n",
            "7  symmetry_encoded  0.023897  333.901556   1.637461e-74\n",
            "\n",
            "Features with the lowest F scores:\n",
            "               Feature  MI Score    F Score       P Value\n",
            "12  girdle_min_encoded  0.027988   0.099306  7.526642e-01\n",
            "11  girdle_max_encoded  0.035837  26.659077  2.430170e-07\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Theory Question:-\n",
        "\n",
        "Describe how this step qualitatively affects the performance of your models in terms of test RMSE. Is it true for all model types? Also list two features for either dataset that has the lowest MI w.r.t to the target.\n",
        "\n",
        "> Feature selection holds significant importance in regression models as it identifies and utilizes only the essential features. Two commonly employed techniques for feature selection are mutual information (MI) regression and F regression. MI regression evaluates the dependency between two random variables, namely the feature and the target variable—in our case, the target variable being price. A higher MI value signifies a stronger dependency, indicating a noteworthy contribution to the target variable, price. Consequently, selecting features with higher MI regression values reduces the dataset to crucial features, thereby enhancing model performance. On the other hand, F scores gauge the significance of augmenting the model's performance by incorporating new variables (features). Higher F scores denote greater significance of the variable, implying that including features with high F scores can enhance the model's performance. This selection process prioritizes features that contribute most effectively to the model's performance.\n",
        "Implementing these methods aids in enhancing model performance, particularly in regression models, by mitigating overfitting and utilizing only pertinent features. This approach enables the model to capture underlying patterns more effectively, resulting in improved generalization performance and reduced test root mean squared error (RMSE). However, the efficacy of these techniques is contingent upon the dataset and the regression model employed. Linear regression models benefit substantially from feature selection as they are susceptible to issues like multicollinearity and overfitting. Conversely, more complex models such as tree-based algorithms inherently perform feature selection, thereby minimizing the impact of MI regression or F score techniques.\n",
        "\n",
        "\n",
        "Features with the lowest mutual information scores:\n",
        "\n",
        "              Feature      MI Score     F Score        P Value\n",
        "      polish_encoded    0.012233    453.535242    1.730325e-100\n",
        "         cut_encoded    0.023815     88.958031    4.087555e-21\n",
        "\n",
        "Features with the lowest F scores:\n",
        "\n",
        "             Feature      MI Score     F Score        P Value\n",
        "    girdle_min_encoded  0.025192    0.099306      7.526642e-01\n",
        "    girdle_max_encoded  0.037749    26.659077     2.430170e-07\n"
      ],
      "metadata": {
        "id": "DJ77SXUJPltM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Question 4"
      ],
      "metadata": {
        "id": "eMeqnEZjUk8j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 4.1"
      ],
      "metadata": {
        "id": "NZBNJkZRVw-I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Theory Question:\n",
        "\n",
        "What is objective funtion? Explain how each regularization scheme affects the learned parameter set.\n",
        "\n",
        "> In linear regression, the objective function is to minimize the difference between the observed target values and the values predicted. This means that we are reducing the mean squared error between the target value and the predicted value.\n",
        "\n",
        "> Ordinary Least Squares (OLS) Regression: OLS aims to minimize the sum of squared residuals without any regularization. It estimates the parameters (coefficients) of the linear regression model by minimizing the sum of squared differences between the observed and predicted values. Without regularization, OLS may lead to overfitting, especially when dealing with high-dimensional datasets or multicollinearity among features.\n",
        "\n",
        "> Lasso Regression: Lasso adds an L1 regularization term to the objective function, which penalizes the absolute values of the coefficients. This penalty encourages sparsity in the parameter set by shrinking some coefficients to exactly zero. As a result, Lasso can perform feature selection by automatically removing irrelevant features from the model.\n",
        "\n",
        "> Ridge Regression: Ridge adds an L2 regularization term to the objective function, which penalizes the squared values of the coefficients. This penalty encourages smaller coefficients and shrinks them towards zero. However, Ridge does not force coefficients to be exactly zero, allowing all features to be included in the model. Ridge can improve the conditioning of the problem and reduce the variance of the estimates, especially when multicollinearity is present among the features"
      ],
      "metadata": {
        "id": "A8aBFUoL_Erh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 4.2"
      ],
      "metadata": {
        "id": "eimFlPfXib8O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score, KFold, cross_validate, GridSearchCV\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.metrics import mean_squared_error"
      ],
      "metadata": {
        "id": "eyngnuLFVZoX"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression, Lasso, Ridge"
      ],
      "metadata": {
        "id": "528qjbbrVrh5"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Splitting the scaled reduced dataset\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X_Scaled_reduced_df, Y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "n_ZENB-CfEX0"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Without Standardization"
      ],
      "metadata": {
        "id": "ixrZfIL21See"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define Lasso and Ridge regression models\n",
        "lasso = Lasso()\n",
        "ridge = Ridge()\n",
        "\n",
        "# Define alpha values for grid search\n",
        "alpha_values = [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0]  # Adjust the range as needed\n",
        "\n",
        "# Define parameter grid for grid search\n",
        "lasso_param_grid = {'alpha': alpha_values}\n",
        "ridge_param_grid = {'alpha': alpha_values}\n",
        "\n",
        "# Perform grid search for Lasso regression\n",
        "lasso_grid_search = GridSearchCV(lasso, param_grid=lasso_param_grid, scoring='neg_mean_squared_error', cv=10)\n",
        "lasso_grid_search.fit(X, Y)\n",
        "\n",
        "# Perform grid search for Ridge regression\n",
        "ridge_grid_search = GridSearchCV(ridge, param_grid=ridge_param_grid, scoring='neg_mean_squared_error', cv=10)\n",
        "ridge_grid_search.fit(X, Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "outputId": "b1ec49fa-f7f5-4543-8201-7c08d283ab1e",
        "id": "AeTzeidDnmzM"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=10, estimator=Ridge(),\n",
              "             param_grid={'alpha': [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0,\n",
              "                                   1000.0]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10, estimator=Ridge(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0,\n",
              "                                   1000.0]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=10, estimator=Ridge(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0,\n",
              "                                   1000.0]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Report the best regularization scheme and optimal penalty parameter\n",
        "best_alpha_lasso_unscaled = lasso_grid_search.best_params_['alpha']\n",
        "best_alpha_ridge_unscaled = ridge_grid_search.best_params_['alpha']\n",
        "\n",
        "print(f\"Best regularization scheme:\")\n",
        "print(f\"- Lasso Regression with alpha={best_alpha_lasso_unscaled}\")\n",
        "print(f\"- Ridge Regression with alpha={best_alpha_ridge_unscaled}\")\n",
        "\n",
        "# # Optionally, you can print the best cross-validated RMSE scores\n",
        "# print(\"\\nBest cross-validated RMSE scores:\")\n",
        "# print(f\"- Lasso Regression: {np.sqrt(-lasso_grid_search.best_score_):.2f}\")\n",
        "# print(f\"- Ridge Regression: {np.sqrt(-ridge_grid_search.best_score_):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b338e9e5-5351-4a8c-a9ba-cce3051cd69d",
        "id": "sJ1GCem2nmzM"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best regularization scheme:\n",
            "- Lasso Regression with alpha=0.01\n",
            "- Ridge Regression with alpha=0.0001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ols_model = LinearRegression()\n",
        "lasso_model = Lasso(alpha=best_alpha_lasso_unscaled)  # Using best alpha value for Lasso\n",
        "ridge_model = Ridge(alpha=best_alpha_ridge_unscaled)  # Using best alpha value for Ridge\n",
        "\n",
        "# Perform 10-fold cross-validation for OLS model\n",
        "ols_scores = cross_val_score(ols_model, X, Y, cv=10, scoring='neg_mean_squared_error')\n",
        "ols_rmse = np.sqrt(-ols_scores)\n",
        "\n",
        "# Perform 10-fold cross-validation for Lasso model\n",
        "lasso_scores = cross_val_score(lasso_model, X, Y, cv=10, scoring='neg_mean_squared_error')\n",
        "lasso_rmse = np.sqrt(-lasso_scores)\n",
        "\n",
        "# Perform 10-fold cross-validation for Ridge model\n",
        "ridge_scores = cross_val_score(ridge_model, X, Y, cv=10, scoring='neg_mean_squared_error')\n",
        "ridge_rmse = np.sqrt(-ridge_scores)\n",
        "\n",
        "# Calculate average RMSE scores\n",
        "ols_avg_rmse_unscaled = np.mean(ols_rmse)\n",
        "lasso_avg_rmse_unscaled = np.mean(lasso_rmse)\n",
        "ridge_avg_rmse_unscaled = np.mean(ridge_rmse)\n",
        "\n",
        "# Print average RMSE scores\n",
        "print(\"Average RMSE for Ordinary Least Squares (OLS) for Unscaled Data:\", ols_avg_rmse_unscaled)\n",
        "print(\"Average RMSE for Lasso Regression for Unscaled Data:\", lasso_avg_rmse_unscaled)\n",
        "print(\"Average RMSE for Ridge Regression for Unscaled Data:\", ridge_avg_rmse_unscaled)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eTp3StkKZnNe",
        "outputId": "c1b29e4b-9962-472d-b90d-c67ceb4b80c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average RMSE for Ordinary Least Squares (OLS) for Unscaled Data: 1571.035361861907\n",
            "Average RMSE for Lasso Regression for Unscaled Data: 1570.88201356099\n",
            "Average RMSE for Ridge Regression for Unscaled Data: 1571.0354586551564\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Theory Question:-\n",
        "\n",
        "Report your choice of the best regularization scheme along with the optimal penalty parameter and explain how you computed it.\n",
        "\n",
        "> Best regularization scheme:\n",
        "- Lasso Regression with alpha=0.01\n",
        "- Ridge Regression with alpha=0.0001"
      ],
      "metadata": {
        "id": "yReQzS2Dhrru"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 4.3"
      ],
      "metadata": {
        "id": "Os7FOjiAnAvX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### With Standardization and Feature Selection"
      ],
      "metadata": {
        "id": "XVr0uzp7IEaJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define Lasso and Ridge regression models\n",
        "lasso = Lasso()\n",
        "ridge = Ridge()\n",
        "\n",
        "# Define alpha values for grid search\n",
        "alpha_values = [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0, 1000.0]  # Adjust the range as needed\n",
        "\n",
        "# Define parameter grid for grid search\n",
        "lasso_param_grid = {'alpha': alpha_values}\n",
        "ridge_param_grid = {'alpha': alpha_values}\n",
        "\n",
        "# Perform grid search for Lasso regression\n",
        "lasso_grid_search = GridSearchCV(lasso, param_grid=lasso_param_grid, scoring='neg_mean_squared_error', cv=10)\n",
        "lasso_grid_search.fit(X_train, Y_train)\n",
        "\n",
        "# Perform grid search for Ridge regression\n",
        "ridge_grid_search = GridSearchCV(ridge, param_grid=ridge_param_grid, scoring='neg_mean_squared_error', cv=10)\n",
        "ridge_grid_search.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "id": "0Qwuxr8yIEaJ",
        "outputId": "9fd41cfb-0c4e-4684-8594-7f6ae8987b0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=10, estimator=Ridge(),\n",
              "             param_grid={'alpha': [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0,\n",
              "                                   1000.0]},\n",
              "             scoring='neg_mean_squared_error')"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10, estimator=Ridge(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0,\n",
              "                                   1000.0]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=10, estimator=Ridge(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.0001, 0.001, 0.01, 0.1, 1.0, 10.0, 100.0,\n",
              "                                   1000.0]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Report the best regularization scheme and optimal penalty parameter\n",
        "best_alpha_lasso_scaled = lasso_grid_search.best_params_['alpha']\n",
        "best_alpha_ridge_scaled = ridge_grid_search.best_params_['alpha']\n",
        "\n",
        "print(f\"Best regularization scheme:\")\n",
        "print(f\"- Lasso Regression with alpha={best_alpha_lasso_scaled}\")\n",
        "print(f\"- Ridge Regression with alpha={best_alpha_ridge_scaled}\")\n",
        "\n",
        "# # Optionally, you can print the best cross-validated RMSE scores\n",
        "# print(\"\\nBest cross-validated RMSE scores:\")\n",
        "# print(f\"- Lasso Regression: {np.sqrt(-lasso_grid_search.best_score_):.2f}\")\n",
        "# print(f\"- Ridge Regression: {np.sqrt(-ridge_grid_search.best_score_):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w9cez6ieIEaJ",
        "outputId": "7f20ad58-a6d3-4205-8f94-2a24eaa41b9d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best regularization scheme:\n",
            "- Lasso Regression with alpha=0.1\n",
            "- Ridge Regression with alpha=0.0001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ols_model = LinearRegression()\n",
        "lasso_model = Lasso(alpha=best_alpha_lasso_scaled)  # Using best alpha value for Lasso\n",
        "ridge_model = Ridge(alpha=best_alpha_ridge_scaled)  # Using best alpha value for Ridge\n",
        "\n",
        "# Perform 10-fold cross-validation for OLS model\n",
        "ols_scores = cross_val_score(ols_model, X_train, Y_train, cv=10, scoring='neg_mean_squared_error')\n",
        "ols_cv_rmse = np.sqrt(-ols_scores.mean())\n",
        "\n",
        "# Perform 10-fold cross-validation for Lasso model\n",
        "lasso_scores = cross_val_score(lasso_model, X_train, Y_train, cv=10, scoring='neg_mean_squared_error')\n",
        "lasso_cv_rmse = np.sqrt(-lasso_scores.mean())\n",
        "\n",
        "# Perform 10-fold cross-validation for Ridge model\n",
        "ridge_scores = cross_val_score(ridge_model, X_train, Y_train, cv=10, scoring='neg_mean_squared_error')\n",
        "ridge_cv_rmse = np.sqrt(-ridge_scores.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pV7xLkbDIEaJ",
        "outputId": "0496cda5-2c35-470f-bbb9-61ecafb0e27c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-78-309812098095>:7: RuntimeWarning: invalid value encountered in sqrt\n",
            "  ols_cv_rmse = np.sqrt(--ols_scores.mean())\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train Lasso and Ridge regression models on the entire training dataset\n",
        "ols_model.fit(X_train, Y_train)\n",
        "lasso_model.fit(X_train, Y_train)\n",
        "ridge_model.fit(X_train, Y_train)\n",
        "\n",
        "# Evaluate models on the test set\n",
        "ols_test_preds = ols_model.predict(X_test)\n",
        "lasso_test_preds = lasso_model.predict(X_test)\n",
        "ridge_test_preds = ridge_model.predict(X_test)\n",
        "\n",
        "# Calculate root mean squared error (RMSE) on the test set\n",
        "ols_test_rmse = np.sqrt(mean_squared_error(Y_test, ols_test_preds))\n",
        "lasso_test_rmse = np.sqrt(mean_squared_error(Y_test, lasso_test_preds))\n",
        "ridge_test_rmse = np.sqrt(mean_squared_error(Y_test, ridge_test_preds))\n",
        "\n",
        "# Print the RMSE values\n",
        "print(\"Lasso CV RMSE:\", lasso_cv_rmse)\n",
        "print(\"Ridge CV RMSE:\", ridge_cv_rmse)\n",
        "print(\"Lasso Test RMSE:\", lasso_test_rmse)\n",
        "print(\"Ridge Test RMSE:\", ridge_test_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RbKMhC85gfRC",
        "outputId": "f407e29f-2d3c-471a-9239-146dbe3891e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lasso CV RMSE: 1619.500087777625\n",
            "Ridge CV RMSE: 1619.512659888272\n",
            "Lasso Test RMSE: 1613.7549246183992\n",
            "Ridge Test RMSE: 1613.7530377250657\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Theory Question\n",
        "\n",
        "Does feature standardization play a role in improving the model performance (in the cases with ridge regularization)? Justify your answer.\n",
        "\n",
        "> Feature standardization (scaling) is essential in Ridge regularization because Ridge penalizes the squared values of the coefficients, and the magnitude of the coefficients directly affects the regularization term. Features with larger scales may dominate the penalty term, leading to biased parameter estimates. By standardizing the features to have zero mean and unit variance, all features are put on the same scale, preventing any single feature from dominating the regularization process. Therefore, feature standardization can play a crucial role in improving the model performance when using Ridge regularization.\n",
        "\n",
        "> In our specific case, we observe that standardization did not substantially alter RMSE values. However, the necessity of feature scaling depends on the regression type and dataset characteristics. For non-normally distributed data or specific regression types, feature scaling may not significantly impact RMSE or could even increase it."
      ],
      "metadata": {
        "id": "BREnPQKF1avs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 4.4"
      ],
      "metadata": {
        "id": "STXyyNc21ehg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**P-Values**"
      ],
      "metadata": {
        "id": "vSFcQjFmf_6C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm"
      ],
      "metadata": {
        "id": "A6jdUAnwACt_"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lm_fit = sm.OLS(Y, sm.add_constant(X_Scaled_reduced_df)).fit()\n",
        "print(lm_fit.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xuHFPDGJ0rTD",
        "outputId": "b65394f7-58a6-4eb7-fc3b-2d3dfef2a5cc"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                  price   R-squared:                       0.882\n",
            "Model:                            OLS   Adj. R-squared:                  0.882\n",
            "Method:                 Least Squares   F-statistic:                 1.867e+05\n",
            "Date:                Sun, 17 Mar 2024   Prob (F-statistic):               0.00\n",
            "Time:                        20:01:49   Log-Likelihood:            -1.3200e+06\n",
            "No. Observations:              149871   AIC:                         2.640e+06\n",
            "Df Residuals:                  149864   BIC:                         2.640e+06\n",
            "Df Model:                           6                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "===================================================================================\n",
            "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------\n",
            "const            3303.9155      4.179    790.625      0.000    3295.725    3312.106\n",
            "carat            5519.7402     17.837    309.452      0.000    5484.780    5554.701\n",
            "length           -904.4113     23.856    -37.911      0.000    -951.169    -857.653\n",
            "width             -46.7894     16.475     -2.840      0.005     -79.080     -14.498\n",
            "depth             -30.5676      4.464     -6.847      0.000     -39.317     -21.818\n",
            "color_encoded     796.8021      4.310    184.883      0.000     788.355     805.249\n",
            "clarity_encoded   595.6472      4.278    139.250      0.000     587.263     604.031\n",
            "==============================================================================\n",
            "Omnibus:                    67917.175   Durbin-Watson:                   1.064\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          4196026.691\n",
            "Skew:                           1.373   Prob(JB):                         0.00\n",
            "Kurtosis:                      28.776   Cond. No.                         12.5\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding p values for reduced scaled data\n",
        "lm_fit.pvalues"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9kgkuBOQ1Vgv",
        "outputId": "90f2bc83-22f0-4f23-9e68-c383ab8efaed"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "const              0.000000e+00\n",
              "carat              0.000000e+00\n",
              "length             0.000000e+00\n",
              "width              4.511933e-03\n",
              "depth              7.563643e-12\n",
              "color_encoded      0.000000e+00\n",
              "clarity_encoded    0.000000e+00\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lm_fit = sm.OLS(Y, sm.add_constant(X)).fit()\n",
        "print(lm_fit.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ao3lSBec3LTq",
        "outputId": "98a7b12b-c4c3-488a-82cb-57fc08e9f976"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                  price   R-squared:                       0.883\n",
            "Model:                            OLS   Adj. R-squared:                  0.883\n",
            "Method:                 Least Squares   F-statistic:                 8.739e+04\n",
            "Date:                Sun, 17 Mar 2024   Prob (F-statistic):               0.00\n",
            "Time:                        20:01:52   Log-Likelihood:            -1.3191e+06\n",
            "No. Observations:              149871   AIC:                         2.638e+06\n",
            "Df Residuals:                  149857   BIC:                         2.638e+06\n",
            "Df Model:                          13                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "======================================================================================\n",
            "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
            "--------------------------------------------------------------------------------------\n",
            "const              -3469.3727    101.127    -34.307      0.000   -3667.579   -3271.166\n",
            "carat               1.397e+04     44.538    313.677      0.000    1.39e+04    1.41e+04\n",
            "depth_percent        -33.5590      1.557    -21.555      0.000     -36.611     -30.508\n",
            "table_percent         24.9345      1.560     15.988      0.000      21.878      27.991\n",
            "length              -996.7925     23.615    -42.209      0.000   -1043.078    -950.507\n",
            "width                -34.4376     15.590     -2.209      0.027     -64.993      -3.882\n",
            "depth                 -9.3191      2.343     -3.978      0.000     -13.911      -4.727\n",
            "cut_encoded          210.0202     12.491     16.814      0.000     185.538     234.502\n",
            "symmetry_encoded      57.9210     11.823      4.899      0.000      34.748      81.094\n",
            "polish_encoded        38.2760     13.102      2.921      0.003      12.596      63.956\n",
            "color_encoded        333.3471      1.826    182.557      0.000     329.768     336.926\n",
            "clarity_encoded      304.7873      2.302    132.388      0.000     300.275     309.300\n",
            "girdle_max_encoded    52.8288      2.924     18.066      0.000      47.098      58.560\n",
            "girdle_min_encoded   -37.5942      2.747    -13.683      0.000     -42.979     -32.209\n",
            "==============================================================================\n",
            "Omnibus:                    66449.461   Durbin-Watson:                   1.088\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          4436882.448\n",
            "Skew:                           1.303   Prob(JB):                         0.00\n",
            "Kurtosis:                      29.528   Cond. No.                     2.20e+03\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "[2] The condition number is large, 2.2e+03. This might indicate that there are\n",
            "strong multicollinearity or other numerical problems.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Theory Question\n",
        "\n",
        "Some linear regression packages return p-values for different features2. What is the meaning of these p-values and how can you infer the most significant features? A qualitative reasoning is sufficient.\n",
        "\n",
        "> The p-values associated with each feature in linear regression indicate the statistical significance of that feature in predicting the target variable. A small p-value (typically less than a chosen significance level, e.g., 0.05) indicates that the null hypothesis, which states that the coefficient of the feature is zero (no effect), can be rejected. Therefore, features with small p-values are considered statistically significant predictors of the target variable. On the other hand, features with large p-values are not statistically significant predictors. Therefore, to infer the most significant features, you can look for features with the smallest p-values, indicating high statistical significance. These features are likely to have a meaningful impact on the target variable.\n",
        "\n",
        "        The p values obtained for the reduced scaled dataset are:\n",
        "        \n",
        "            const              0.000000e+00\n",
        "            carat              0.000000e+00\n",
        "            length             0.000000e+00\n",
        "            width              4.511933e-03\n",
        "            depth              7.563643e-12\n",
        "            color_encoded      0.000000e+00\n",
        "            clarity_encoded    0.000000e+00\n",
        "\n"
      ],
      "metadata": {
        "id": "38Q3DKlt2_3y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Question 5"
      ],
      "metadata": {
        "id": "NcTFXeUs_Pz2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler, PolynomialFeatures\n",
        "from sklearn.pipeline import Pipeline, make_pipeline"
      ],
      "metadata": {
        "id": "zFW18_xyDbNO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the range of polynomial degrees to search over\n",
        "degrees = [1, 2, 3, 4, 5, 6]\n",
        "\n",
        "# Initialize lists to store the results\n",
        "avg_rmse_scores = []\n",
        "\n",
        "for degree in degrees:\n",
        "    # Generate polynomial features up to the specified degree\n",
        "    poly = PolynomialFeatures(degree=degree, include_bias=False)\n",
        "    X_poly = poly.fit_transform(X_train)  # X is your feature matrix\n",
        "\n",
        "    # Define a pipeline for polynomial regression with ridge regularization\n",
        "    pipeline = make_pipeline(StandardScaler(), Ridge())\n",
        "\n",
        "    # Define hyperparameter grid for alpha (regularization strength)\n",
        "    param_grid = {'ridge__alpha': [0.001, 0.01, 0.1, 1, 10, 100]}\n",
        "\n",
        "    # Perform Ridge regression with cross-validation to find the optimal alpha\n",
        "    ridge_model = GridSearchCV(pipeline, param_grid, cv=10, scoring='neg_mean_squared_error')\n",
        "    ridge_model.fit(X_poly, Y_train)\n",
        "\n",
        "    # Get the best ridge regression model from the grid search\n",
        "    best_model_ridge = ridge_model.best_estimator_.named_steps['ridge']\n",
        "\n",
        "    # Access the alpha value used in the best Ridge model\n",
        "    optimal_alpha = best_model_ridge.alpha\n",
        "\n",
        "    # Evaluate the best model\n",
        "    ridge_rmse = np.sqrt(-ridge_model.best_score_)\n",
        "\n",
        "    avg_rmse_scores.append(ridge_rmse)\n",
        "\n",
        "# Find the index of the degree with the lowest average RMSE\n",
        "best_degree_index = np.argmin(avg_rmse_scores)\n",
        "best_degree = degrees[best_degree_index]\n",
        "\n",
        "# Print the optimal degree and its corresponding average RMSE\n",
        "print(\"Optimal degree:\", best_degree)\n",
        "print(\"Average RMSE for optimal degree:\", avg_rmse_scores[best_degree_index])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VzDLTWzWDkG7",
        "outputId": "78c5b515-9ecf-4686-bc87-6f2bb28933a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal degree: 3\n",
            "Average RMSE for optimal degree: 765.0979014891634\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create polynomial features\n",
        "poly = PolynomialFeatures(degree=best_degree)\n",
        "X_train_poly = poly.fit_transform(X_train)\n",
        "X_test_poly = poly.transform(X_test)\n",
        "\n",
        "# Fit Ridge regression model\n",
        "ridge = Ridge(alpha=optimal_alpha)  # You can adjust alpha as needed\n",
        "ridge.fit(X_train_poly, Y_train)\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred = ridge.predict(X_test_poly)\n",
        "\n",
        "# Calculate RMSE\n",
        "test_rmse = np.sqrt(mean_squared_error(Y_test, y_pred))\n",
        "print(\"Test RMSE:\", test_rmse)\n",
        "\n",
        "rmse_scores = np.sqrt(-cross_val_score(ridge, X_train, Y_train, scoring=\"neg_mean_squared_error\", cv=10))\n",
        "print(\"Cross Validation RMSE: \",np.mean(rmse_scores))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AF8v7qfcewv7",
        "outputId": "9689a290-919d-4cae-b4f1-70263ebbed7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test RMSE: 7323.519352319502\n",
            "Cross Validation RMSE:  1619.093606180702\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the polynomial features of the best degree\n",
        "poly_features = poly.get_feature_names_out(X_train.columns)\n",
        "print(\"Polynomial Features:\",poly_features)\n",
        "\n",
        "# Combine the coefficients with the corresponding feature names\n",
        "coefficients = pd.Series(ridge.coef_, index=poly_features)\n",
        "\n",
        "print(coefficients)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bsp9tL9LfFuy",
        "outputId": "8c543dc6-f69b-403b-845a-55790c848e03"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Polynomial Features: ['1' 'carat' 'length' 'width' 'depth' 'color_encoded' 'clarity_encoded'\n",
            " 'carat^2' 'carat length' 'carat width' 'carat depth'\n",
            " 'carat color_encoded' 'carat clarity_encoded' 'length^2' 'length width'\n",
            " 'length depth' 'length color_encoded' 'length clarity_encoded' 'width^2'\n",
            " 'width depth' 'width color_encoded' 'width clarity_encoded' 'depth^2'\n",
            " 'depth color_encoded' 'depth clarity_encoded' 'color_encoded^2'\n",
            " 'color_encoded clarity_encoded' 'clarity_encoded^2' 'carat^3'\n",
            " 'carat^2 length' 'carat^2 width' 'carat^2 depth' 'carat^2 color_encoded'\n",
            " 'carat^2 clarity_encoded' 'carat length^2' 'carat length width'\n",
            " 'carat length depth' 'carat length color_encoded'\n",
            " 'carat length clarity_encoded' 'carat width^2' 'carat width depth'\n",
            " 'carat width color_encoded' 'carat width clarity_encoded' 'carat depth^2'\n",
            " 'carat depth color_encoded' 'carat depth clarity_encoded'\n",
            " 'carat color_encoded^2' 'carat color_encoded clarity_encoded'\n",
            " 'carat clarity_encoded^2' 'length^3' 'length^2 width' 'length^2 depth'\n",
            " 'length^2 color_encoded' 'length^2 clarity_encoded' 'length width^2'\n",
            " 'length width depth' 'length width color_encoded'\n",
            " 'length width clarity_encoded' 'length depth^2'\n",
            " 'length depth color_encoded' 'length depth clarity_encoded'\n",
            " 'length color_encoded^2' 'length color_encoded clarity_encoded'\n",
            " 'length clarity_encoded^2' 'width^3' 'width^2 depth'\n",
            " 'width^2 color_encoded' 'width^2 clarity_encoded' 'width depth^2'\n",
            " 'width depth color_encoded' 'width depth clarity_encoded'\n",
            " 'width color_encoded^2' 'width color_encoded clarity_encoded'\n",
            " 'width clarity_encoded^2' 'depth^3' 'depth^2 color_encoded'\n",
            " 'depth^2 clarity_encoded' 'depth color_encoded^2'\n",
            " 'depth color_encoded clarity_encoded' 'depth clarity_encoded^2'\n",
            " 'color_encoded^3' 'color_encoded^2 clarity_encoded'\n",
            " 'color_encoded clarity_encoded^2' 'clarity_encoded^3']\n",
            "1                                     0.000000\n",
            "carat                              2471.092102\n",
            "length                              426.913408\n",
            "width                               656.495343\n",
            "depth                                 4.849625\n",
            "                                      ...     \n",
            "depth clarity_encoded^2               0.884843\n",
            "color_encoded^3                     -58.399773\n",
            "color_encoded^2 clarity_encoded      57.347419\n",
            "color_encoded clarity_encoded^2     -16.003449\n",
            "clarity_encoded^3                    24.075654\n",
            "Length: 84, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sort the coefficients by their absolute values\n",
        "sorted_coefficients = coefficients.abs().sort_values(ascending=False)\n",
        "\n",
        "# Select the top N features (e.g., top 10)\n",
        "top_features = sorted_coefficients.head(10)\n",
        "\n",
        "# Print the top N features and their coefficients\n",
        "print(\"Top 10 most salient features:\")\n",
        "print(top_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GQB15Xk_fPBu",
        "outputId": "1e99feaf-8739-4c02-9728-96594498b7c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 10 most salient features:\n",
            "carat depth                  4113.474472\n",
            "width depth                  2509.078551\n",
            "carat                        2471.092102\n",
            "length width                 2101.523405\n",
            "carat length                 1701.180714\n",
            "length depth                 1508.769071\n",
            "carat width depth            1250.523931\n",
            "carat width color_encoded    1221.805363\n",
            "carat^2                      1195.777872\n",
            "length^2                     1165.312703\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 6"
      ],
      "metadata": {
        "id": "Vpirfg7D1I-Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Trying on scaled reduced data\n",
        "hyperParameters = {'hidden_layer_sizes': [(50,50)],\n",
        "                   'activation': ['relu','logistic','logistic','identity'],\n",
        "                   'alpha': [0.1]}\n",
        "\n",
        "# perform grid search\n",
        "gridSearch = GridSearchCV(MLPRegressor(max_iter=400, learning_rate_init=0.001, random_state=42), hyperParameters, cv=10, scoring='neg_mean_squared_error', n_jobs=-1, verbose=5)\n",
        "gridSearch.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "id": "ttEVMeWPFqEP",
        "outputId": "de4f13a3-ff8f-4a32-9dc3-70e4bd093092"
      },
      "execution_count": 50,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=10, estimator=MLPRegressor(max_iter=400, random_state=42),\n",
              "             n_jobs=-1,\n",
              "             param_grid={'activation': ['relu'], 'alpha': [0.1],\n",
              "                         'hidden_layer_sizes': [(50, 50)]},\n",
              "             scoring='neg_mean_squared_error', verbose=5)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10, estimator=MLPRegressor(max_iter=400, random_state=42),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;activation&#x27;: [&#x27;relu&#x27;], &#x27;alpha&#x27;: [0.1],\n",
              "                         &#x27;hidden_layer_sizes&#x27;: [(50, 50)]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;, verbose=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=10, estimator=MLPRegressor(max_iter=400, random_state=42),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;activation&#x27;: [&#x27;relu&#x27;], &#x27;alpha&#x27;: [0.1],\n",
              "                         &#x27;hidden_layer_sizes&#x27;: [(50, 50)]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;, verbose=5)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: MLPRegressor</label><div class=\"sk-toggleable__content\"><pre>MLPRegressor(max_iter=400, random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPRegressor</label><div class=\"sk-toggleable__content\"><pre>MLPRegressor(max_iter=400, random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_params = gridSearch.best_params_\n",
        "best_rmse = (-gridSearch.best_score_) ** 0.5\n",
        "print(\"Best params\",best_params)\n",
        "print(\"RMSE: \", best_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KcPgl4kRFrxF",
        "outputId": "91b7bb01-0547-436d-87d1-9a42456669a6"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best params {'activation': 'relu', 'alpha': 0.1, 'hidden_layer_sizes': (50, 50)}\n",
            "RMSE:  657.894527711852\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Trying on scaled reduced data\n",
        "hyperParameters = {'hidden_layer_sizes': [(50,50)],\n",
        "                   'activation': ['relu','logistic','logistic','identity'],\n",
        "                   'alpha': [0.1,0.01,0.001]}\n",
        "\n",
        "# perform grid search\n",
        "gridSearch = GridSearchCV(MLPRegressor(max_iter=400, learning_rate_init=0.001, random_state=42), hyperParameters, cv=10, scoring='neg_mean_squared_error', n_jobs=-1, verbose=5)\n",
        "gridSearch.fit(X_train, Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 136
        },
        "id": "eBmUqofshpBW",
        "outputId": "d9ed52e5-a2e7-459c-b359-0a702c0a9656"
      },
      "execution_count": 52,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 10 folds for each of 12 candidates, totalling 120 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=10, estimator=MLPRegressor(max_iter=400, random_state=42),\n",
              "             n_jobs=-1,\n",
              "             param_grid={'activation': ['relu', 'logistic', 'logistic',\n",
              "                                        'identity'],\n",
              "                         'alpha': [0.1, 0.01, 0.001],\n",
              "                         'hidden_layer_sizes': [(50, 50)]},\n",
              "             scoring='neg_mean_squared_error', verbose=5)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=10, estimator=MLPRegressor(max_iter=400, random_state=42),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;activation&#x27;: [&#x27;relu&#x27;, &#x27;logistic&#x27;, &#x27;logistic&#x27;,\n",
              "                                        &#x27;identity&#x27;],\n",
              "                         &#x27;alpha&#x27;: [0.1, 0.01, 0.001],\n",
              "                         &#x27;hidden_layer_sizes&#x27;: [(50, 50)]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;, verbose=5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=10, estimator=MLPRegressor(max_iter=400, random_state=42),\n",
              "             n_jobs=-1,\n",
              "             param_grid={&#x27;activation&#x27;: [&#x27;relu&#x27;, &#x27;logistic&#x27;, &#x27;logistic&#x27;,\n",
              "                                        &#x27;identity&#x27;],\n",
              "                         &#x27;alpha&#x27;: [0.1, 0.01, 0.001],\n",
              "                         &#x27;hidden_layer_sizes&#x27;: [(50, 50)]},\n",
              "             scoring=&#x27;neg_mean_squared_error&#x27;, verbose=5)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: MLPRegressor</label><div class=\"sk-toggleable__content\"><pre>MLPRegressor(max_iter=400, random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPRegressor</label><div class=\"sk-toggleable__content\"><pre>MLPRegressor(max_iter=400, random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "best_params = gridSearch.best_params_\n",
        "best_rmse = (-gridSearch.best_score_) ** 0.5\n",
        "print(\"Best params\",best_params)\n",
        "print(\"RMSE: \", best_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cxqbXTvZhw7J",
        "outputId": "8da6a76e-804d-4836-a869-218dfebf29ce"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best params {'activation': 'relu', 'alpha': 0.001, 'hidden_layer_sizes': (50, 50)}\n",
            "RMSE:  655.2950341681866\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Splitting into train and test\n",
        "mlp = MLPRegressor(random_state=42, max_iter = 400, learning_rate_init =0.001, alpha = 0.001, hidden_layer_sizes = (50, 50))\n",
        "mlp.fit(X_train, Y_train)\n",
        "\n",
        "Y_pred = mlp.predict(X_test)\n",
        "\n",
        "test_rmse = np.sqrt(mean_squared_error(Y_test, Y_pred))\n",
        "print(\"Test RMSE:\", test_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3QDJH6-wm-tg",
        "outputId": "2887d627-454b-4182-8405-ac9c98f56e79"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test RMSE: 662.585629480836\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 7"
      ],
      "metadata": {
        "id": "HVQ_kRcvLLmk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define hyperparameters\n",
        "max_features = [8,10,20,\"auto\", \"sqrt\", \"log2\"]  # Maximum number of features\n",
        "n_estimators = [50,100]  # Number of trees\n",
        "max_depth = [None, 4, 5, 10]  # Depth of each tree\n",
        "\n",
        "# Initialize lists to store results\n",
        "best_rmse = float(\"inf\")\n",
        "best_hyperparameters = None\n",
        "best_oob_error = float(\"inf\")\n",
        "\n",
        "# Loop over hyperparameters\n",
        "for feature in max_features:\n",
        "    for estimator in n_estimators:\n",
        "        for depth in max_depth:\n",
        "            print(\"Calculating for \",feature,estimator, depth)\n",
        "            # Initialize random forest regressor with hyperparameters\n",
        "            rf_model = RandomForestRegressor(max_features=feature, n_estimators=estimator, max_depth=depth, random_state=42, oob_score=True)\n",
        "\n",
        "            # Perform cross-validation to estimate RMSE\n",
        "            rmse_scores = np.sqrt(-cross_val_score(rf_model, X_Scaled_reduced_df, Y, cv=10, scoring='neg_mean_squared_error'))\n",
        "\n",
        "            # Calculate mean RMSE\n",
        "            mean_rmse = np.mean(rmse_scores)\n",
        "\n",
        "            print(\"Mean RSME:\", mean_rmse)\n",
        "\n",
        "            # Update best RMSE and hyperparameters if current configuration is better\n",
        "            if mean_rmse < best_rmse:\n",
        "                best_rmse = mean_rmse\n",
        "                best_hyperparameters = {\"max_features\": feature, \"n_estimators\": estimator, \"max_depth\": depth}\n",
        "\n",
        "            # Train the model to calculate out-of-bag error\n",
        "            rf_model.fit(X_Scaled_reduced_df, Y)\n",
        "\n",
        "            # Calculate out-of-bag error\n",
        "            oob_error = 1 - rf_model.oob_score_\n",
        "\n",
        "            print(\"OOB Error: \", oob_error)\n",
        "\n",
        "            # Update best out-of-bag error if current configuration is better\n",
        "            if oob_error < best_oob_error:\n",
        "                best_oob_error = oob_error\n",
        "\n",
        "# Print best hyperparameters, RMSE, and out-of-bag error\n",
        "print(\"Best hyperparameters:\", best_hyperparameters)\n",
        "print(\"Best RMSE:\", best_rmse)\n",
        "print(\"Best Out-of-bag error:\", best_oob_error)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Cdnn4cKna2W",
        "outputId": "8c2ab9d9-1ba0-4ed2-b137-685e1b6d8bf7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Calculating for  8 50 None\n",
            "Mean RSME: 1303.7815484928149\n",
            "OOB Error:  0.020396585029004766\n",
            "Calculating for  8 50 4\n",
            "Mean RSME: 1748.0704539644335\n",
            "OOB Error:  0.09069472610647\n",
            "Calculating for  8 50 5\n",
            "Mean RSME: 1601.55085208836\n",
            "OOB Error:  0.058634458043415605\n",
            "Calculating for  8 50 10\n",
            "Mean RSME: 1322.0994277429686\n",
            "OOB Error:  0.019493687360765843\n",
            "Calculating for  8 100 None\n",
            "Mean RSME: 1301.8676420073566\n",
            "OOB Error:  0.01996432595428821\n",
            "Calculating for  8 100 4\n",
            "Mean RSME: 1751.522704033195\n",
            "OOB Error:  0.08983430225232181\n",
            "Calculating for  8 100 5\n",
            "Mean RSME: 1598.9825747170983\n",
            "OOB Error:  0.05790371337531497\n",
            "Calculating for  8 100 10\n",
            "Mean RSME: 1320.627240979169\n",
            "OOB Error:  0.019290294968740906\n",
            "Calculating for  10 50 None\n",
            "Mean RSME: 1303.7815484928149\n",
            "OOB Error:  0.020396585029004766\n",
            "Calculating for  10 50 4\n",
            "Mean RSME: 1748.0704539644335\n",
            "OOB Error:  0.09069472610647\n",
            "Calculating for  10 50 5\n",
            "Mean RSME: 1601.55085208836\n",
            "OOB Error:  0.058634458043415605\n",
            "Calculating for  10 50 10\n",
            "Mean RSME: 1322.0994277429686\n",
            "OOB Error:  0.019493687360765843\n",
            "Calculating for  10 100 None\n",
            "Mean RSME: 1301.8676420073566\n",
            "OOB Error:  0.01996432595428821\n",
            "Calculating for  10 100 4\n",
            "Mean RSME: 1751.522704033195\n",
            "OOB Error:  0.08983430225232181\n",
            "Calculating for  10 100 5\n",
            "Mean RSME: 1598.9825747170983\n",
            "OOB Error:  0.05790371337531497\n",
            "Calculating for  10 100 10\n",
            "Mean RSME: 1320.627240979169\n",
            "OOB Error:  0.019290294968740906\n",
            "Calculating for  20 50 None\n",
            "Mean RSME: 1303.7815484928149\n",
            "OOB Error:  0.020396585029004766\n",
            "Calculating for  20 50 4\n",
            "Mean RSME: 1748.0704539644335\n",
            "OOB Error:  0.09069472610647\n",
            "Calculating for  20 50 5\n",
            "Mean RSME: 1601.55085208836\n",
            "OOB Error:  0.058634458043415605\n",
            "Calculating for  20 50 10\n",
            "Mean RSME: 1322.0994277429686\n",
            "OOB Error:  0.019493687360765843\n",
            "Calculating for  20 100 None\n",
            "Mean RSME: 1301.8676420073566\n",
            "OOB Error:  0.01996432595428821\n",
            "Calculating for  20 100 4\n",
            "Mean RSME: 1751.522704033195\n",
            "OOB Error:  0.08983430225232181\n",
            "Calculating for  20 100 5\n",
            "Mean RSME: 1598.9825747170983\n",
            "OOB Error:  0.05790371337531497\n",
            "Calculating for  20 100 10\n",
            "Mean RSME: 1320.627240979169\n",
            "OOB Error:  0.019290294968740906\n",
            "Calculating for  auto 50 None\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1303.7815484928149\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.020396585029004766\n",
            "Calculating for  auto 50 4\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1748.0704539644335\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.09069472610647\n",
            "Calculating for  auto 50 5\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1601.55085208836\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.058634458043415605\n",
            "Calculating for  auto 50 10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1322.0994277429686\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.019493687360765843\n",
            "Calculating for  auto 100 None\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1301.8676420073566\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.01996432595428821\n",
            "Calculating for  auto 100 4\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1751.522704033195\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.08983430225232181\n",
            "Calculating for  auto 100 5\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1598.9825747170983\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.05790371337531497\n",
            "Calculating for  auto 100 10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean RSME: 1320.627240979169\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OOB Error:  0.019290294968740906\n",
            "Calculating for  sqrt 50 None\n",
            "Mean RSME: 1292.2280221275262\n",
            "OOB Error:  0.020486730450453683\n",
            "Calculating for  sqrt 50 4\n",
            "Mean RSME: 1744.2177497779303\n",
            "OOB Error:  0.09081412121404375\n",
            "Calculating for  sqrt 50 5\n",
            "Mean RSME: 1603.6333106704953\n",
            "OOB Error:  0.06971014869298031\n",
            "Calculating for  sqrt 50 10\n",
            "Mean RSME: 1338.368335979855\n",
            "OOB Error:  0.02531850886244158\n",
            "Calculating for  sqrt 100 None\n",
            "Mean RSME: 1288.4566791258658\n",
            "OOB Error:  0.019824988272737487\n",
            "Calculating for  sqrt 100 4\n",
            "Mean RSME: 1740.0705260328027\n",
            "OOB Error:  0.08958921116325258\n",
            "Calculating for  sqrt 100 5\n",
            "Mean RSME: 1604.504944769722\n",
            "OOB Error:  0.06765014036705297\n",
            "Calculating for  sqrt 100 10\n",
            "Mean RSME: 1337.737447151537\n",
            "OOB Error:  0.02473398803569471\n",
            "Calculating for  log2 50 None\n",
            "Mean RSME: 1292.2280221275262\n",
            "OOB Error:  0.020486730450453683\n",
            "Calculating for  log2 50 4\n",
            "Mean RSME: 1744.2177497779303\n",
            "OOB Error:  0.09081412121404375\n",
            "Calculating for  log2 50 5\n",
            "Mean RSME: 1603.6333106704953\n",
            "OOB Error:  0.06971014869298031\n",
            "Calculating for  log2 50 10\n",
            "Mean RSME: 1338.368335979855\n",
            "OOB Error:  0.02531850886244158\n",
            "Calculating for  log2 100 None\n",
            "Mean RSME: 1288.4566791258658\n",
            "OOB Error:  0.019824988272737487\n",
            "Calculating for  log2 100 4\n",
            "Mean RSME: 1740.0705260328027\n",
            "OOB Error:  0.08958921116325258\n",
            "Calculating for  log2 100 5\n",
            "Mean RSME: 1604.504944769722\n",
            "OOB Error:  0.06765014036705297\n",
            "Calculating for  log2 100 10\n",
            "Mean RSME: 1337.737447151537\n",
            "OOB Error:  0.02473398803569471\n",
            "Best hyperparameters: {'max_features': 'sqrt', 'n_estimators': 100, 'max_depth': None}\n",
            "Best RMSE: 1288.4566791258658\n",
            "Best Out-of-bag error: 0.019290294968740906\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the hyperparameters grid\n",
        "param_grid = {\n",
        "    'max_features': [8, 10, 20, \"auto\", \"sqrt\", \"log2\"],\n",
        "    'n_estimators': [50, 100],\n",
        "    'max_depth': [None, 4, 5, 10]\n",
        "}\n",
        "\n",
        "# Create a RandomForestRegressor instance\n",
        "rf_model = RandomForestRegressor(random_state=42)\n",
        "\n",
        "# Initialize GridSearchCV with the defined parameter grid and cross-validation strategy\n",
        "grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, scoring='neg_mean_squared_error', cv=10)\n",
        "\n",
        "# Fit the grid search to the training data\n",
        "grid_search.fit(X_train, Y_train)\n",
        "\n",
        "# Get the best hyperparameters\n",
        "best_params = grid_search.best_params_\n",
        "\n",
        "# Train the model with the best hyperparameters\n",
        "best_rf_model = RandomForestRegressor(**best_params, random_state=42)\n",
        "best_rf_model.fit(X_train, Y_train)\n",
        "\n",
        "# Predict on the test set\n",
        "Y_pred = best_rf_model.predict(X_test)\n",
        "\n",
        "# Calculate test RMSE\n",
        "test_rmse = np.sqrt(mean_squared_error(Y_test, Y_pred))\n",
        "\n",
        "# Get the RMSE for each fold during cross-validation\n",
        "cv_rmse = np.sqrt(-grid_search.cv_results_['mean_test_score'])\n",
        "\n",
        "# Print the results\n",
        "print(\"Best hyperparameters:\", best_params)\n",
        "print(\"Test RMSE:\", test_rmse)\n",
        "print(\"CV RMSE:\", cv_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZD1U6ARlg1Xp",
        "outputId": "9dede565-05e1-4b84-fd73-5d7d9eeab5e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
            "  warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best hyperparameters: {'max_depth': 10, 'max_features': 8, 'n_estimators': 100}\n",
            "Test RMSE: 650.9824075604025\n",
            "CV RMSE: [ 673.48233343  669.71550976  673.48233343  669.71550976  673.48233343\n",
            "  669.71550976  673.48233343  669.71550976  674.43041448  668.90263862\n",
            "  674.43041448  668.90263862 1405.39452196 1401.80918557 1405.39452196\n",
            " 1401.80918557 1405.39452196 1401.80918557 1405.39452196 1401.80918557\n",
            " 1406.6916329  1402.64887342 1406.6916329  1402.64887342 1130.93636642\n",
            " 1126.89322228 1130.93636642 1126.89322228 1130.93636642 1126.89322228\n",
            " 1130.93636642 1126.89322228 1239.53948347 1228.26123363 1239.53948347\n",
            " 1228.26123363  657.98870909  656.82844802  657.98870909  656.82844802\n",
            "  657.98870909  656.82844802  657.98870909  656.82844802  734.12031641\n",
            "  732.33071574  734.12031641  732.33071574]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate out-of-bag error\n",
        "oob_error = 1 - best_rf_model.oob_score_\n",
        "\n",
        "print(\"OOB Error: \", oob_error)"
      ],
      "metadata": {
        "id": "wOb-lLropB9Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "vis_tree = RandomForestRegressor(random_state=42,max_depth=4, max_features=3, n_estimators=10).fit(X_train,Y_train)"
      ],
      "metadata": {
        "id": "Y9jS2lYtqwda"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_graphviz\n",
        "import pydot\n",
        "from IPython.display import Image"
      ],
      "metadata": {
        "id": "QMS7Ta_iZEGS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tree = vis_tree.estimators_[1]\n",
        "export_graphviz(tree, out_file = 'tree1.dot', feature_names = selected_feature_names, rounded = True, precision = 1)\n",
        "(graph, ) = pydot.graph_from_dot_file('tree1.dot')\n",
        "Image(graph.create_png())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "9MmHxagjq05e",
        "outputId": "826cca24-b890-41f6-81b2-b1624ae7c267"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import graphviz"
      ],
      "metadata": {
        "id": "fJ_wM1eFwEhx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "graphviz.Source.from_file('tree1.dot')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "lQ41rxPTq4AT",
        "outputId": "fe60623e-c9eb-40fa-f551-cbaa545866a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: Tree Pages: 1 -->\n<svg width=\"3142pt\" height=\"477pt\"\n viewBox=\"0.00 0.00 3142.00 477.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 473)\">\n<title>Tree</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-473 3138,-473 3138,4 -4,4\"/>\n<!-- 0 -->\n<g id=\"node1\" class=\"node\">\n<title>0</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1601,-469C1601,-469 1437,-469 1437,-469 1431,-469 1425,-463 1425,-457 1425,-457 1425,-413 1425,-413 1425,-407 1431,-401 1437,-401 1437,-401 1601,-401 1601,-401 1607,-401 1613,-407 1613,-413 1613,-413 1613,-457 1613,-457 1613,-463 1607,-469 1601,-469\"/>\n<text text-anchor=\"middle\" x=\"1519\" y=\"-453.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">width &lt;= 1.2</text>\n<text text-anchor=\"middle\" x=\"1519\" y=\"-438.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 22603923.3</text>\n<text text-anchor=\"middle\" x=\"1519\" y=\"-423.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 76021</text>\n<text text-anchor=\"middle\" x=\"1519\" y=\"-408.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 3334.9</text>\n</g>\n<!-- 1 -->\n<g id=\"node2\" class=\"node\">\n<title>1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1203.5,-365C1203.5,-365 1046.5,-365 1046.5,-365 1040.5,-365 1034.5,-359 1034.5,-353 1034.5,-353 1034.5,-309 1034.5,-309 1034.5,-303 1040.5,-297 1046.5,-297 1046.5,-297 1203.5,-297 1203.5,-297 1209.5,-297 1215.5,-303 1215.5,-309 1215.5,-309 1215.5,-353 1215.5,-353 1215.5,-359 1209.5,-365 1203.5,-365\"/>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">width &lt;= &#45;0.1</text>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 2176103.5</text>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 64914</text>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 1769.1</text>\n</g>\n<!-- 0&#45;&gt;1 -->\n<g id=\"edge1\" class=\"edge\">\n<title>0&#45;&gt;1</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1424.88,-409.63C1364.7,-394.05 1286.72,-373.87 1225.36,-357.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1226.22,-354.59 1215.67,-355.47 1224.47,-361.37 1226.22,-354.59\"/>\n<text text-anchor=\"middle\" x=\"1228.35\" y=\"-373.32\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n</g>\n<!-- 16 -->\n<g id=\"node17\" class=\"node\">\n<title>16</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2001,-365C2001,-365 1837,-365 1837,-365 1831,-365 1825,-359 1825,-353 1825,-353 1825,-309 1825,-309 1825,-303 1831,-297 1837,-297 1837,-297 2001,-297 2001,-297 2007,-297 2013,-303 2013,-309 2013,-309 2013,-353 2013,-353 2013,-359 2007,-365 2001,-365\"/>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">length &lt;= 2.2</text>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-334.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 44451028.1</text>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-319.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 11107</text>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-304.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 12406.5</text>\n</g>\n<!-- 0&#45;&gt;16 -->\n<g id=\"edge16\" class=\"edge\">\n<title>0&#45;&gt;16</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1613.03,-410.02C1673.65,-394.56 1752.52,-374.45 1815,-358.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1816.06,-361.86 1824.88,-356 1814.33,-355.08 1816.06,-361.86\"/>\n<text text-anchor=\"middle\" x=\"1812.12\" y=\"-373.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n</g>\n<!-- 2 -->\n<g id=\"node3\" class=\"node\">\n<title>2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M625.5,-261C625.5,-261 476.5,-261 476.5,-261 470.5,-261 464.5,-255 464.5,-249 464.5,-249 464.5,-205 464.5,-205 464.5,-199 470.5,-193 476.5,-193 476.5,-193 625.5,-193 625.5,-193 631.5,-193 637.5,-199 637.5,-205 637.5,-205 637.5,-249 637.5,-249 637.5,-255 631.5,-261 625.5,-261\"/>\n<text text-anchor=\"middle\" x=\"551\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">width &lt;= &#45;0.5</text>\n<text text-anchor=\"middle\" x=\"551\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 114238.9</text>\n<text text-anchor=\"middle\" x=\"551\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 42994</text>\n<text text-anchor=\"middle\" x=\"551\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 987.3</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1034.36,-313.89C928.98,-295.17 755.73,-264.38 647.79,-245.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"648.33,-241.74 637.87,-243.44 647.1,-248.63 648.33,-241.74\"/>\n</g>\n<!-- 9 -->\n<g id=\"node10\" class=\"node\">\n<title>9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1203.5,-261C1203.5,-261 1046.5,-261 1046.5,-261 1040.5,-261 1034.5,-255 1034.5,-249 1034.5,-249 1034.5,-205 1034.5,-205 1034.5,-199 1040.5,-193 1046.5,-193 1046.5,-193 1203.5,-193 1203.5,-193 1209.5,-193 1215.5,-199 1215.5,-205 1215.5,-205 1215.5,-249 1215.5,-249 1215.5,-255 1209.5,-261 1203.5,-261\"/>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">width &lt;= 0.8</text>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 2676495.8</text>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 21920</text>\n<text text-anchor=\"middle\" x=\"1125\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 3297.2</text>\n</g>\n<!-- 1&#45;&gt;9 -->\n<g id=\"edge9\" class=\"edge\">\n<title>1&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1125,-296.88C1125,-288.78 1125,-279.98 1125,-271.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1128.5,-271.3 1125,-261.3 1121.5,-271.3 1128.5,-271.3\"/>\n</g>\n<!-- 3 -->\n<g id=\"node4\" class=\"node\">\n<title>3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M338,-157C338,-157 196,-157 196,-157 190,-157 184,-151 184,-145 184,-145 184,-101 184,-101 184,-95 190,-89 196,-89 196,-89 338,-89 338,-89 344,-89 350,-95 350,-101 350,-101 350,-145 350,-145 350,-151 344,-157 338,-157\"/>\n<text text-anchor=\"middle\" x=\"267\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">carat &lt;= &#45;0.6</text>\n<text text-anchor=\"middle\" x=\"267\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 45255.1</text>\n<text text-anchor=\"middle\" x=\"267\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 32902</text>\n<text text-anchor=\"middle\" x=\"267\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 879.7</text>\n</g>\n<!-- 2&#45;&gt;3 -->\n<g id=\"edge3\" class=\"edge\">\n<title>2&#45;&gt;3</title>\n<path fill=\"none\" stroke=\"black\" d=\"M464.25,-194.84C431.29,-183 393.62,-169.48 360.1,-157.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.9,-154 350.3,-153.92 358.53,-160.59 360.9,-154\"/>\n</g>\n<!-- 6 -->\n<g id=\"node7\" class=\"node\">\n<title>6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M625.5,-157C625.5,-157 476.5,-157 476.5,-157 470.5,-157 464.5,-151 464.5,-145 464.5,-145 464.5,-101 464.5,-101 464.5,-95 470.5,-89 476.5,-89 476.5,-89 625.5,-89 625.5,-89 631.5,-89 637.5,-95 637.5,-101 637.5,-101 637.5,-145 637.5,-145 637.5,-151 631.5,-157 625.5,-157\"/>\n<text text-anchor=\"middle\" x=\"551\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">carat &lt;= &#45;0.3</text>\n<text text-anchor=\"middle\" x=\"551\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 178604.0</text>\n<text text-anchor=\"middle\" x=\"551\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 10092</text>\n<text text-anchor=\"middle\" x=\"551\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 1336.5</text>\n</g>\n<!-- 2&#45;&gt;6 -->\n<g id=\"edge6\" class=\"edge\">\n<title>2&#45;&gt;6</title>\n<path fill=\"none\" stroke=\"black\" d=\"M551,-192.88C551,-184.78 551,-175.98 551,-167.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"554.5,-167.3 551,-157.3 547.5,-167.3 554.5,-167.3\"/>\n</g>\n<!-- 4 -->\n<g id=\"node5\" class=\"node\">\n<title>4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M154,-53C154,-53 12,-53 12,-53 6,-53 0,-47 0,-41 0,-41 0,-12 0,-12 0,-6 6,0 12,0 12,0 154,0 154,0 160,0 166,-6 166,-12 166,-12 166,-41 166,-41 166,-47 160,-53 154,-53\"/>\n<text text-anchor=\"middle\" x=\"83\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 36645.3</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 26146</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 844.6</text>\n</g>\n<!-- 3&#45;&gt;4 -->\n<g id=\"edge4\" class=\"edge\">\n<title>3&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.65,-88.95C182.87,-78.79 161.22,-67.67 141.84,-57.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"143.31,-54.54 132.82,-53.09 140.12,-60.77 143.31,-54.54\"/>\n</g>\n<!-- 5 -->\n<g id=\"node6\" class=\"node\">\n<title>5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M338,-53C338,-53 196,-53 196,-53 190,-53 184,-47 184,-41 184,-41 184,-12 184,-12 184,-6 190,0 196,0 196,0 338,0 338,0 344,0 350,-6 350,-12 350,-12 350,-41 350,-41 350,-47 344,-53 338,-53\"/>\n<text text-anchor=\"middle\" x=\"267\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 55384.8</text>\n<text text-anchor=\"middle\" x=\"267\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6756</text>\n<text text-anchor=\"middle\" x=\"267\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 1014.6</text>\n</g>\n<!-- 3&#45;&gt;5 -->\n<g id=\"edge5\" class=\"edge\">\n<title>3&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"black\" d=\"M267,-88.95C267,-80.72 267,-71.85 267,-63.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"270.5,-63.24 267,-53.24 263.5,-63.24 270.5,-63.24\"/>\n</g>\n<!-- 7 -->\n<g id=\"node8\" class=\"node\">\n<title>7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M529.5,-53C529.5,-53 380.5,-53 380.5,-53 374.5,-53 368.5,-47 368.5,-41 368.5,-41 368.5,-12 368.5,-12 368.5,-6 374.5,0 380.5,0 380.5,0 529.5,0 529.5,0 535.5,0 541.5,-6 541.5,-12 541.5,-12 541.5,-41 541.5,-41 541.5,-47 535.5,-53 529.5,-53\"/>\n<text text-anchor=\"middle\" x=\"455\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 156796.1</text>\n<text text-anchor=\"middle\" x=\"455\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 9350</text>\n<text text-anchor=\"middle\" x=\"455\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 1306.2</text>\n</g>\n<!-- 6&#45;&gt;7 -->\n<g id=\"edge7\" class=\"edge\">\n<title>6&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"black\" d=\"M517.42,-88.95C508.04,-79.71 497.84,-69.67 488.46,-60.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"490.73,-57.76 481.15,-53.24 485.82,-62.75 490.73,-57.76\"/>\n</g>\n<!-- 8 -->\n<g id=\"node9\" class=\"node\">\n<title>8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M720.5,-53C720.5,-53 571.5,-53 571.5,-53 565.5,-53 559.5,-47 559.5,-41 559.5,-41 559.5,-12 559.5,-12 559.5,-6 565.5,0 571.5,0 571.5,0 720.5,0 720.5,0 726.5,0 732.5,-6 732.5,-12 732.5,-12 732.5,-41 732.5,-41 732.5,-47 726.5,-53 720.5,-53\"/>\n<text text-anchor=\"middle\" x=\"646\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 295812.8</text>\n<text text-anchor=\"middle\" x=\"646\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 742</text>\n<text text-anchor=\"middle\" x=\"646\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 1724.2</text>\n</g>\n<!-- 6&#45;&gt;8 -->\n<g id=\"edge8\" class=\"edge\">\n<title>6&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"black\" d=\"M584.23,-88.95C593.51,-79.71 603.61,-69.67 612.89,-60.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"615.51,-62.77 620.13,-53.24 610.57,-57.81 615.51,-62.77\"/>\n</g>\n<!-- 10 -->\n<g id=\"node11\" class=\"node\">\n<title>10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1102.5,-157C1102.5,-157 953.5,-157 953.5,-157 947.5,-157 941.5,-151 941.5,-145 941.5,-145 941.5,-101 941.5,-101 941.5,-95 947.5,-89 953.5,-89 953.5,-89 1102.5,-89 1102.5,-89 1108.5,-89 1114.5,-95 1114.5,-101 1114.5,-101 1114.5,-145 1114.5,-145 1114.5,-151 1108.5,-157 1102.5,-157\"/>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">width &lt;= 0.4</text>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 961804.2</text>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 18710</text>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 2840.3</text>\n</g>\n<!-- 9&#45;&gt;10 -->\n<g id=\"edge10\" class=\"edge\">\n<title>9&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1093.51,-192.88C1084.95,-183.89 1075.59,-174.04 1066.68,-164.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1069.09,-162.13 1059.67,-157.3 1064.02,-166.96 1069.09,-162.13\"/>\n</g>\n<!-- 13 -->\n<g id=\"node14\" class=\"node\">\n<title>13</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1301.5,-157C1301.5,-157 1144.5,-157 1144.5,-157 1138.5,-157 1132.5,-151 1132.5,-145 1132.5,-145 1132.5,-101 1132.5,-101 1132.5,-95 1138.5,-89 1144.5,-89 1144.5,-89 1301.5,-89 1301.5,-89 1307.5,-89 1313.5,-95 1313.5,-101 1313.5,-101 1313.5,-145 1313.5,-145 1313.5,-151 1307.5,-157 1301.5,-157\"/>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">color_encoded &lt;= &#45;1.0</text>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 4383640.1</text>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3210</text>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 5950.1</text>\n</g>\n<!-- 9&#45;&gt;13 -->\n<g id=\"edge13\" class=\"edge\">\n<title>9&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1156.82,-192.88C1165.46,-183.89 1174.92,-174.04 1183.92,-164.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1186.6,-166.94 1191.01,-157.3 1181.55,-162.09 1186.6,-166.94\"/>\n</g>\n<!-- 11 -->\n<g id=\"node12\" class=\"node\">\n<title>11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M911.5,-53C911.5,-53 762.5,-53 762.5,-53 756.5,-53 750.5,-47 750.5,-41 750.5,-41 750.5,-12 750.5,-12 750.5,-6 756.5,0 762.5,0 762.5,0 911.5,0 911.5,0 917.5,0 923.5,-6 923.5,-12 923.5,-12 923.5,-41 923.5,-41 923.5,-47 917.5,-53 911.5,-53\"/>\n<text text-anchor=\"middle\" x=\"837\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 595351.5</text>\n<text text-anchor=\"middle\" x=\"837\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 12979</text>\n<text text-anchor=\"middle\" x=\"837\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 2509.5</text>\n</g>\n<!-- 10&#45;&gt;11 -->\n<g id=\"edge11\" class=\"edge\">\n<title>10&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"black\" d=\"M961.2,-88.95C940.58,-78.75 918,-67.57 897.81,-57.59\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"899.23,-54.38 888.71,-53.09 896.13,-60.66 899.23,-54.38\"/>\n</g>\n<!-- 12 -->\n<g id=\"node13\" class=\"node\">\n<title>12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1102.5,-53C1102.5,-53 953.5,-53 953.5,-53 947.5,-53 941.5,-47 941.5,-41 941.5,-41 941.5,-12 941.5,-12 941.5,-6 947.5,0 953.5,0 953.5,0 1102.5,0 1102.5,0 1108.5,0 1114.5,-6 1114.5,-12 1114.5,-12 1114.5,-41 1114.5,-41 1114.5,-47 1108.5,-53 1102.5,-53\"/>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 977992.1</text>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5731</text>\n<text text-anchor=\"middle\" x=\"1028\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 3595.6</text>\n</g>\n<!-- 10&#45;&gt;12 -->\n<g id=\"edge12\" class=\"edge\">\n<title>10&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1028,-88.95C1028,-80.72 1028,-71.85 1028,-63.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1031.5,-63.24 1028,-53.24 1024.5,-63.24 1031.5,-63.24\"/>\n</g>\n<!-- 14 -->\n<g id=\"node15\" class=\"node\">\n<title>14</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1301.5,-53C1301.5,-53 1144.5,-53 1144.5,-53 1138.5,-53 1132.5,-47 1132.5,-41 1132.5,-41 1132.5,-12 1132.5,-12 1132.5,-6 1138.5,0 1144.5,0 1144.5,0 1301.5,0 1301.5,0 1307.5,0 1313.5,-6 1313.5,-12 1313.5,-12 1313.5,-41 1313.5,-41 1313.5,-47 1307.5,-53 1301.5,-53\"/>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 1282441.1</text>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 788</text>\n<text text-anchor=\"middle\" x=\"1223\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 4184.3</text>\n</g>\n<!-- 13&#45;&gt;14 -->\n<g id=\"edge14\" class=\"edge\">\n<title>13&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1223,-88.95C1223,-80.72 1223,-71.85 1223,-63.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1226.5,-63.24 1223,-53.24 1219.5,-63.24 1226.5,-63.24\"/>\n</g>\n<!-- 15 -->\n<g id=\"node16\" class=\"node\">\n<title>15</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1500.5,-53C1500.5,-53 1343.5,-53 1343.5,-53 1337.5,-53 1331.5,-47 1331.5,-41 1331.5,-41 1331.5,-12 1331.5,-12 1331.5,-6 1337.5,0 1343.5,0 1343.5,0 1500.5,0 1500.5,0 1506.5,0 1512.5,-6 1512.5,-12 1512.5,-12 1512.5,-41 1512.5,-41 1512.5,-47 1506.5,-53 1500.5,-53\"/>\n<text text-anchor=\"middle\" x=\"1422\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 4066138.1</text>\n<text text-anchor=\"middle\" x=\"1422\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2422</text>\n<text text-anchor=\"middle\" x=\"1422\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 6508.8</text>\n</g>\n<!-- 13&#45;&gt;15 -->\n<g id=\"edge15\" class=\"edge\">\n<title>13&#45;&gt;15</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1292.6,-88.95C1314.18,-78.7 1337.82,-67.47 1358.93,-57.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1360.59,-60.54 1368.12,-53.09 1357.58,-54.21 1360.59,-60.54\"/>\n</g>\n<!-- 17 -->\n<g id=\"node18\" class=\"node\">\n<title>17</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2001,-261C2001,-261 1837,-261 1837,-261 1831,-261 1825,-255 1825,-249 1825,-249 1825,-205 1825,-205 1825,-199 1831,-193 1837,-193 1837,-193 2001,-193 2001,-193 2007,-193 2013,-199 2013,-205 2013,-205 2013,-249 2013,-249 2013,-255 2007,-261 2001,-261\"/>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">clarity_encoded &lt;= &#45;0.5</text>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 13507232.6</text>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 7483</text>\n<text text-anchor=\"middle\" x=\"1919\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 9203.2</text>\n</g>\n<!-- 16&#45;&gt;17 -->\n<g id=\"edge17\" class=\"edge\">\n<title>16&#45;&gt;17</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1919,-296.88C1919,-288.78 1919,-279.98 1919,-271.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1922.5,-271.3 1919,-261.3 1915.5,-271.3 1922.5,-271.3\"/>\n</g>\n<!-- 24 -->\n<g id=\"node25\" class=\"node\">\n<title>24</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2608,-261C2608,-261 2444,-261 2444,-261 2438,-261 2432,-255 2432,-249 2432,-249 2432,-205 2432,-205 2432,-199 2438,-193 2444,-193 2444,-193 2608,-193 2608,-193 2614,-193 2620,-199 2620,-205 2620,-205 2620,-249 2620,-249 2620,-255 2614,-261 2608,-261\"/>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">length &lt;= 2.6</text>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 43866662.9</text>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-215.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3624</text>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-200.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 18952.4</text>\n</g>\n<!-- 16&#45;&gt;24 -->\n<g id=\"edge24\" class=\"edge\">\n<title>16&#45;&gt;24</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2013.18,-314.17C2123.84,-295.58 2306.89,-264.82 2421.74,-245.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2422.32,-248.97 2431.6,-243.86 2421.16,-242.07 2422.32,-248.97\"/>\n</g>\n<!-- 18 -->\n<g id=\"node19\" class=\"node\">\n<title>18</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1896.5,-157C1896.5,-157 1739.5,-157 1739.5,-157 1733.5,-157 1727.5,-151 1727.5,-145 1727.5,-145 1727.5,-101 1727.5,-101 1727.5,-95 1733.5,-89 1739.5,-89 1739.5,-89 1896.5,-89 1896.5,-89 1902.5,-89 1908.5,-95 1908.5,-101 1908.5,-101 1908.5,-145 1908.5,-145 1908.5,-151 1902.5,-157 1896.5,-157\"/>\n<text text-anchor=\"middle\" x=\"1818\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">width &lt;= 1.7</text>\n<text text-anchor=\"middle\" x=\"1818\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 5406529.3</text>\n<text text-anchor=\"middle\" x=\"1818\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3416</text>\n<text text-anchor=\"middle\" x=\"1818\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 7276.0</text>\n</g>\n<!-- 17&#45;&gt;18 -->\n<g id=\"edge18\" class=\"edge\">\n<title>17&#45;&gt;18</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1886.21,-192.88C1877.3,-183.89 1867.55,-174.04 1858.28,-164.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1860.5,-161.94 1850.97,-157.3 1855.52,-166.87 1860.5,-161.94\"/>\n</g>\n<!-- 21 -->\n<g id=\"node22\" class=\"node\">\n<title>21</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2103,-157C2103,-157 1939,-157 1939,-157 1933,-157 1927,-151 1927,-145 1927,-145 1927,-101 1927,-101 1927,-95 1933,-89 1939,-89 1939,-89 2103,-89 2103,-89 2109,-89 2115,-95 2115,-101 2115,-101 2115,-145 2115,-145 2115,-151 2109,-157 2103,-157\"/>\n<text text-anchor=\"middle\" x=\"2021\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">length &lt;= 1.7</text>\n<text text-anchor=\"middle\" x=\"2021\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 14558618.1</text>\n<text text-anchor=\"middle\" x=\"2021\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 4067</text>\n<text text-anchor=\"middle\" x=\"2021\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 10834.9</text>\n</g>\n<!-- 17&#45;&gt;21 -->\n<g id=\"edge21\" class=\"edge\">\n<title>17&#45;&gt;21</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1952.12,-192.88C1961.2,-183.8 1971.15,-173.85 1980.6,-164.4\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1983.1,-166.85 1987.7,-157.3 1978.15,-161.9 1983.1,-166.85\"/>\n</g>\n<!-- 19 -->\n<g id=\"node20\" class=\"node\">\n<title>19</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1699.5,-53C1699.5,-53 1542.5,-53 1542.5,-53 1536.5,-53 1530.5,-47 1530.5,-41 1530.5,-41 1530.5,-12 1530.5,-12 1530.5,-6 1536.5,0 1542.5,0 1542.5,0 1699.5,0 1699.5,0 1705.5,0 1711.5,-6 1711.5,-12 1711.5,-12 1711.5,-41 1711.5,-41 1711.5,-47 1705.5,-53 1699.5,-53\"/>\n<text text-anchor=\"middle\" x=\"1621\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 3443667.9</text>\n<text text-anchor=\"middle\" x=\"1621\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2823</text>\n<text text-anchor=\"middle\" x=\"1621\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 6743.0</text>\n</g>\n<!-- 18&#45;&gt;19 -->\n<g id=\"edge19\" class=\"edge\">\n<title>18&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1749.1,-88.95C1727.74,-78.7 1704.33,-67.47 1683.44,-57.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1684.87,-54.26 1674.34,-53.09 1681.84,-60.57 1684.87,-54.26\"/>\n</g>\n<!-- 20 -->\n<g id=\"node21\" class=\"node\">\n<title>20</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1898.5,-53C1898.5,-53 1741.5,-53 1741.5,-53 1735.5,-53 1729.5,-47 1729.5,-41 1729.5,-41 1729.5,-12 1729.5,-12 1729.5,-6 1735.5,0 1741.5,0 1741.5,0 1898.5,0 1898.5,0 1904.5,0 1910.5,-6 1910.5,-12 1910.5,-12 1910.5,-41 1910.5,-41 1910.5,-47 1904.5,-53 1898.5,-53\"/>\n<text text-anchor=\"middle\" x=\"1820\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 7039246.8</text>\n<text text-anchor=\"middle\" x=\"1820\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 593</text>\n<text text-anchor=\"middle\" x=\"1820\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 9771.8</text>\n</g>\n<!-- 18&#45;&gt;20 -->\n<g id=\"edge20\" class=\"edge\">\n<title>18&#45;&gt;20</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1818.7,-88.95C1818.87,-80.72 1819.06,-71.85 1819.24,-63.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"1822.74,-63.31 1819.46,-53.24 1815.74,-63.16 1822.74,-63.31\"/>\n</g>\n<!-- 22 -->\n<g id=\"node23\" class=\"node\">\n<title>22</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2097.5,-53C2097.5,-53 1940.5,-53 1940.5,-53 1934.5,-53 1928.5,-47 1928.5,-41 1928.5,-41 1928.5,-12 1928.5,-12 1928.5,-6 1934.5,0 1940.5,0 1940.5,0 2097.5,0 2097.5,0 2103.5,0 2109.5,-6 2109.5,-12 2109.5,-12 2109.5,-41 2109.5,-41 2109.5,-47 2103.5,-53 2097.5,-53\"/>\n<text text-anchor=\"middle\" x=\"2019\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 9994773.7</text>\n<text text-anchor=\"middle\" x=\"2019\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2898</text>\n<text text-anchor=\"middle\" x=\"2019\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 9960.7</text>\n</g>\n<!-- 21&#45;&gt;22 -->\n<g id=\"edge22\" class=\"edge\">\n<title>21&#45;&gt;22</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2020.3,-88.95C2020.13,-80.72 2019.94,-71.85 2019.76,-63.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2023.26,-63.16 2019.54,-53.24 2016.26,-63.31 2023.26,-63.16\"/>\n</g>\n<!-- 23 -->\n<g id=\"node24\" class=\"node\">\n<title>23</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2304,-53C2304,-53 2140,-53 2140,-53 2134,-53 2128,-47 2128,-41 2128,-41 2128,-12 2128,-12 2128,-6 2134,0 2140,0 2140,0 2304,0 2304,0 2310,0 2316,-6 2316,-12 2316,-12 2316,-41 2316,-41 2316,-47 2310,-53 2304,-53\"/>\n<text text-anchor=\"middle\" x=\"2222\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 19280809.2</text>\n<text text-anchor=\"middle\" x=\"2222\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1169</text>\n<text text-anchor=\"middle\" x=\"2222\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 12993.1</text>\n</g>\n<!-- 21&#45;&gt;23 -->\n<g id=\"edge23\" class=\"edge\">\n<title>21&#45;&gt;23</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2091.3,-88.95C2113.09,-78.7 2136.98,-67.47 2158.3,-57.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2160.02,-60.51 2167.58,-53.09 2157.04,-54.17 2160.02,-60.51\"/>\n</g>\n<!-- 25 -->\n<g id=\"node26\" class=\"node\">\n<title>25</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2608,-157C2608,-157 2444,-157 2444,-157 2438,-157 2432,-151 2432,-145 2432,-145 2432,-101 2432,-101 2432,-95 2438,-89 2444,-89 2444,-89 2608,-89 2608,-89 2614,-89 2620,-95 2620,-101 2620,-101 2620,-145 2620,-145 2620,-151 2614,-157 2608,-157\"/>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">color_encoded &lt;= &#45;0.6</text>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 34292047.0</text>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1647</text>\n<text text-anchor=\"middle\" x=\"2526\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 15677.1</text>\n</g>\n<!-- 24&#45;&gt;25 -->\n<g id=\"edge25\" class=\"edge\">\n<title>24&#45;&gt;25</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2526,-192.88C2526,-184.78 2526,-175.98 2526,-167.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2529.5,-167.3 2526,-157.3 2522.5,-167.3 2529.5,-167.3\"/>\n</g>\n<!-- 28 -->\n<g id=\"node29\" class=\"node\">\n<title>28</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2916,-157C2916,-157 2752,-157 2752,-157 2746,-157 2740,-151 2740,-145 2740,-145 2740,-101 2740,-101 2740,-95 2746,-89 2752,-89 2752,-89 2916,-89 2916,-89 2922,-89 2928,-95 2928,-101 2928,-101 2928,-145 2928,-145 2928,-151 2922,-157 2916,-157\"/>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">carat &lt;= 5.7</text>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 35832810.0</text>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1977</text>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-96.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 21616.2</text>\n</g>\n<!-- 24&#45;&gt;28 -->\n<g id=\"edge28\" class=\"edge\">\n<title>24&#45;&gt;28</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2620.08,-194.84C2654.85,-183.33 2694.44,-170.22 2730.04,-158.43\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2731.57,-161.61 2739.96,-155.14 2729.37,-154.96 2731.57,-161.61\"/>\n</g>\n<!-- 26 -->\n<g id=\"node27\" class=\"node\">\n<title>26</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2503.5,-53C2503.5,-53 2346.5,-53 2346.5,-53 2340.5,-53 2334.5,-47 2334.5,-41 2334.5,-41 2334.5,-12 2334.5,-12 2334.5,-6 2340.5,0 2346.5,0 2346.5,0 2503.5,0 2503.5,0 2509.5,0 2515.5,-6 2515.5,-12 2515.5,-12 2515.5,-41 2515.5,-41 2515.5,-47 2509.5,-53 2503.5,-53\"/>\n<text text-anchor=\"middle\" x=\"2425\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 9752323.8</text>\n<text text-anchor=\"middle\" x=\"2425\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 693</text>\n<text text-anchor=\"middle\" x=\"2425\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 11346.1</text>\n</g>\n<!-- 25&#45;&gt;26 -->\n<g id=\"edge26\" class=\"edge\">\n<title>25&#45;&gt;26</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2490.68,-88.95C2480.7,-79.62 2469.86,-69.47 2459.91,-60.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2462.2,-57.51 2452.51,-53.24 2457.42,-62.62 2462.2,-57.51\"/>\n</g>\n<!-- 27 -->\n<g id=\"node28\" class=\"node\">\n<title>27</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2710,-53C2710,-53 2546,-53 2546,-53 2540,-53 2534,-47 2534,-41 2534,-41 2534,-12 2534,-12 2534,-6 2540,0 2546,0 2546,0 2710,0 2710,0 2716,0 2722,-6 2722,-12 2722,-12 2722,-41 2722,-41 2722,-47 2716,-53 2710,-53\"/>\n<text text-anchor=\"middle\" x=\"2628\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 28701699.1</text>\n<text text-anchor=\"middle\" x=\"2628\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 954</text>\n<text text-anchor=\"middle\" x=\"2628\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 18801.4</text>\n</g>\n<!-- 25&#45;&gt;27 -->\n<g id=\"edge27\" class=\"edge\">\n<title>25&#45;&gt;27</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2561.67,-88.95C2571.75,-79.62 2582.7,-69.47 2592.74,-60.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2595.26,-62.6 2600.22,-53.24 2590.51,-57.47 2595.26,-62.6\"/>\n</g>\n<!-- 29 -->\n<g id=\"node30\" class=\"node\">\n<title>29</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2916,-53C2916,-53 2752,-53 2752,-53 2746,-53 2740,-47 2740,-41 2740,-41 2740,-12 2740,-12 2740,-6 2746,0 2752,0 2752,0 2916,0 2916,0 2922,0 2928,-6 2928,-12 2928,-12 2928,-41 2928,-41 2928,-47 2922,-53 2916,-53\"/>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 35411048.5</text>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1851</text>\n<text text-anchor=\"middle\" x=\"2834\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 21309.3</text>\n</g>\n<!-- 28&#45;&gt;29 -->\n<g id=\"edge29\" class=\"edge\">\n<title>28&#45;&gt;29</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2834,-88.95C2834,-80.72 2834,-71.85 2834,-63.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2837.5,-63.24 2834,-53.24 2830.5,-63.24 2837.5,-63.24\"/>\n</g>\n<!-- 30 -->\n<g id=\"node31\" class=\"node\">\n<title>30</title>\n<path fill=\"none\" stroke=\"black\" d=\"M3122,-53C3122,-53 2958,-53 2958,-53 2952,-53 2946,-47 2946,-41 2946,-41 2946,-12 2946,-12 2946,-6 2952,0 2958,0 2958,0 3122,0 3122,0 3128,0 3134,-6 3134,-12 3134,-12 3134,-41 3134,-41 3134,-47 3128,-53 3122,-53\"/>\n<text text-anchor=\"middle\" x=\"3040\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">squared_error = 16675690.8</text>\n<text text-anchor=\"middle\" x=\"3040\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 126</text>\n<text text-anchor=\"middle\" x=\"3040\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = 26559.0</text>\n</g>\n<!-- 28&#45;&gt;30 -->\n<g id=\"edge30\" class=\"edge\">\n<title>28&#45;&gt;30</title>\n<path fill=\"none\" stroke=\"black\" d=\"M2906.05,-88.95C2928.49,-78.66 2953.08,-67.37 2975.01,-57.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"2976.59,-60.44 2984.22,-53.09 2973.68,-54.08 2976.59,-60.44\"/>\n</g>\n</g>\n</svg>\n",
            "text/plain": [
              "<graphviz.sources.Source at 0x7b588af85750>"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Question 8"
      ],
      "metadata": {
        "id": "7JKYoBFwLOS7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scikit-optimize"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uyOjEK4u0iv9",
        "outputId": "74851cfd-8fd1-441c-8eab-6384c9627e52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-optimize\n",
            "  Downloading scikit_optimize-0.10.1-py2.py3-none-any.whl (107 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m107.7/107.7 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.3.2)\n",
            "Collecting pyaml>=16.9 (from scikit-optimize)\n",
            "  Downloading pyaml-23.12.0-py3-none-any.whl (23 kB)\n",
            "Requirement already satisfied: numpy>=1.20.3 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.11.4)\n",
            "Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (1.2.2)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from scikit-optimize) (24.0)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyaml>=16.9->scikit-optimize) (6.0.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->scikit-optimize) (3.3.0)\n",
            "Installing collected packages: pyaml, scikit-optimize\n",
            "Successfully installed pyaml-23.12.0 scikit-optimize-0.10.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from lightgbm import LGBMRegressor\n",
        "from skopt import BayesSearchCV"
      ],
      "metadata": {
        "id": "KKT1yvii0aeo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the search space\n",
        "param_space = {\n",
        "    'num_leaves': (20, 100),\n",
        "    'learning_rate': (0.01, 0.1),\n",
        "    'max_depth': (5, 15),\n",
        "    'min_child_samples': (10, 30),\n",
        "    'subsample': (0.7, 0.9)\n",
        "}\n",
        "\n",
        "# Initialize LightGBM regressor\n",
        "lgbm = LGBMRegressor()\n",
        "\n",
        "# Initialize BayesSearchCV\n",
        "bayes_search = BayesSearchCV(\n",
        "    estimator=lgbm,\n",
        "    search_spaces=param_space,\n",
        "    scoring='neg_root_mean_squared_error',\n",
        "    cv=10,\n",
        "    n_iter=50,\n",
        "    n_jobs=-1,\n",
        "    random_state=42\n",
        ")\n",
        "\n",
        "# Perform Bayesian optimization\n",
        "bayes_search.fit(X_train, Y_train)\n",
        "\n",
        "# Get the best hyperparameters and corresponding RMSE\n",
        "best_params = bayes_search.best_params_\n",
        "best_rmse = np.abs(bayes_search.best_score_)\n",
        "\n",
        "# Print the best hyperparameters and corresponding RMSE\n",
        "print(\"Best Hyperparameters:\", best_params)\n",
        "print(\"Best RMSE:\", best_rmse)\n",
        "\n",
        "# Evaluate on test set\n",
        "test_rmse = np.sqrt(np.mean((bayes_search.predict(X_test) - Y_test) ** 2))\n",
        "print(\"Test RMSE:\", test_rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "15MNGFXzg_Bl",
        "outputId": "32d12d15-b2d4-48a1-8861-7281f90c5df7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013788 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 1040\n",
            "[LightGBM] [Info] Number of data points in the train set: 119896, number of used features: 6\n",
            "[LightGBM] [Info] Start training from score 3301.934935\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "Best Hyperparameters: OrderedDict([('learning_rate', 0.08332138524886121), ('max_depth', 10), ('min_child_samples', 24), ('num_leaves', 95), ('subsample', 0.7143758614840212)])\n",
            "Best RMSE: 627.647251922508\n",
            "Test RMSE: 620.691045915077\n"
          ]
        }
      ]
    }
  ]
}